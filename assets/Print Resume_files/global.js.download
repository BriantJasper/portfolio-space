var console = console || {
		log: function() {
		},
		error: function() {
		}
	};

// html generator functions

function ATTR( key, val ) { // attribute
	return ' ' + key + '=' + Z( val ) + ' ';
}
function ATT( key, val ) { // attribute only when not empty
	if( !val && val!=0 ) return '';
	return ATTR( key, val );
}

// number formatter
function P0( s, len ) {
	s = '' + s;
	while( s.length<len ) s = '0' + s;
	return s;
}
function PF2( n ) {
	var f = parseFloat( n );
	if( isNaN( f ) || f==0 ) return '<i>0</i>';
	if( !isFinite( f ) ) return 'âˆž';
	f = Math.round( f * 100 );
	if( f % 100==0 ) return f / 100 + '.00 %';
	if( f % 10==0 ) return f / 100 + '0 %';
	return f / 100 + ' %';
}
function F2( n ) {
	var f = parseFloat( n );
	if( isNaN( f ) || f==0 ) return '0.00';
	f = Math.round( f * 100 );
	if( f % 100==0 ) return f / 100 + '.00';
	if( f % 10==0 ) return f / 100 + '0';
	return f / 100;
}
function N2( n ) {
	var f = parseFloat( n );
	if( isNaN( f ) || f==0 ) return '0.00';
	f = Math.round( f * 100 );
	if( f % 100==0 ) return f / 100 + '.00';
	if( f % 10==0 ) return f / 100 + '0';
	return f / 100;
}
// money (integer)
function MONEY( n ) {
	n = +n;
	if( !n ) return '<i>0</i>';
	var str = '';
	var odd = false;
	var prefix = '';
	if( n<0 ) {
		n = -n;
		prefix = '-';
	}
	var first = true;
	while( n>0 ) {
		var rem = Math.floor( n % 1000 );
		n = Math.floor( n / 1000 );
		rem = ((n) ? (P0( rem, 3 )) : rem);
		if( !first ) rem = rem + ',';
		str = rem + str;
		odd = !odd;
		first = false;
	}
	return prefix + str;
}
// number (integer)
function N( n ) {
	n = +n;
	// if( !n ) return '<i style="font-size:40%">0</i>';
    if( !n ) return 0;
	var str = '';
	var odd = false;
	var prefix = '';
	if( n<0 ) {
		n = -n;
		prefix = '-';
	}
	while( n>0 ) {
		var rem = Math.floor( n % 1000 );
		n = Math.floor( n / 1000 );
		rem = ((n) ? (P0( rem, 3 )) : rem);
		if( odd ) rem = '<span class="n">' + rem + '</span>';
		str = rem + str;
		odd = !odd;
	}
	return prefix + str;
}
// generate tahun sem
function TSEM( n ) {
	if(n=='-') return 0;
	if( +n<9999 ) return n;
	return Math.floor( n / 10 ) + '<span class="n">' + (n % 10) + '</span>';
}
// pad nim
function NIM( n ) {
	n = '' + n;
	if( n=='' || n=='0' || n=='null' || n=='undefined' || n==' ' ) return '-';
	while( n.length<12 ) n = '0' + n;
	return '<span class="n">' + n.substr( 0, 3 ) + '</span>' + n.substr( 3, 4 ) + '<span class="n">' + n.substr( 7, 2 ) + '</span>' + n.substr( 9, 3 );
}

// date formatter
var Const_DMY = 'D MMM YYYY';
var Const_MDY = 'MMMM D, YYYY';
var Const_DMYHM = 'D MMM YYYY HH:mm';
var Const_DMYHMS = 'D MMM YYYY HH:mm:ss';
var Const_HMS = 'HH:mm:ss';
var Const_HM = 'HH:mm';
var Const_YMD = 'YYYY-MM-DD';
var Const_YMDHMS = 'YYYY-MM-DD HH:mm:ss';
var Const_YMDHM = 'YYYY-MM-DD HH:mm';
var Const_ISO = 'YYYYMMDD_HHmmss';
var Const_YM = 'YYYY-MM';
var Const_DM = 'D MMM';
var Const_DAY = 'dddd';
var Const_DAY_DMY = 'dddd, D MMM YYYY';
var Const_MY = 'MMM YYYY';

function DTW( d ) {
	if( 'string'== typeof d ) d = Moment( d );
	if( !d || !d.isValid ) return 'Weekday, ' + Const_DMY;
	return DS.WeekDay[ d.day() ] + ', ' + d.format( Const_DMYHM );
}
function DW( d ) {
	if( 'string'== typeof d ) d = Moment( d );
	if( !d || !d.isValid ) return 'Weekday, ' + Const_DMY;
	return DS.WeekDay[ d.day() ] + ', ' + d.format( Const_DMY );
}
function DWRange( sd, ed ) {
	return DW( sd ) + ' - ' + DW( ed );
}
function Moment( d ) {
	var md = moment( d );
	if( (d + '').indexOf( 'Z' )>0 ) md = md.utcOffset( 0 );
	return md;
}
function DateInvalid( d ) {
	return !d || d==' ' || d=='-' || d=='0001-01-01T00:00:00Z';
}
function Time( d ) {
	if( DateInvalid( d ) ) return '-';
	var md = Moment( d );
	return UNBREAKABLE( md.format( Const_HMS ) );
}
function DM( d ) {
	if( DateInvalid( d ) ) return '-';
	var md = Moment( d );
	return UNBREAKABLE( md.format( Const_DM ) );
}
function D( d ) {
	if( DateInvalid( d ) ) return '-';
	var md = Moment( d );
	return UNBREAKABLE( md.format( Const_DMY ) );
}
function DT( d ) {
	if( DateInvalid( d ) ) return '-';
	var md = Moment( d );
	return UNBREAKABLE( md.format( Const_DMYHM ) );
}
function Dweekday( d ) {
	if( DateInvalid( d ) ) return '-';
	var md = Moment( d );
	return UNBREAKABLE( md.format( Const_DAY ) );
}
function DTF( d ) {
	if( DateInvalid( d ) ) return '-';
	var md = Moment( d );
	return UNBREAKABLE( md.format( Const_DMYHMS ) );
}
function DTiso( d ) {
	if( DateInvalid( d ) ) return '0000-00-00 000000';
	var md = Moment( d );
	return md.format( Const_ISO );
}
function MD( ds ) {
	if( 'string'== typeof ds ) ds = ds.split( ',' );
	ds.sort();
	var res = [];
	for( var z in ds ) {
		var d = D( ds[ z ] );
		res.push( d );
	}
	return res.join( ', ' );
}
function Ddur( m ) { // duration minutes (to hour)
	m = +m;
	if( m<10 ) return '00:0' + m;
	if( m<60 ) return '00:' + m;
	var h = (m / 60) | 0;
	m %= 60;
	if( h<10 && m<10 ) return '0' + h + ':0' + m;
	if( h<10 ) return '0' + h + ':' + m;
	if( m<10 ) return h + ':0' + m;
	return h + ':' + m;
}
function Dmin( m ) { // duration minutes
	var prefix = '', str = '';
	m = parseInt( m );
	if( m<0 ) {
		m = -m;
		prefix = '-';
	}
	var t = (m % 60) | 0;
	if( t ) str = t + (t==1 ? ' minute ' : ' minutes ') + str;
	m = m / 60;
	t = (m % 24) | 0;
	if( t ) str = t + (t==1 ? ' hour ' : ' hours ') + str;
	m = m / 24;
	if( m ) str = Dday( m ) + str;
	return prefix + str;
}
function Dday( d ) { // duration days
	var prefix = '', str = '';
	d = parseInt( d );
	if( d<0 ) {
		d = -d;
		prefix = '-';
	}
	var t = (d / 36525) | 0;
	if( t ) str += t + (t==1 ? ' century ' : ' centuries ');
	d %= 36525;
	t = (d / 3652.5) | 0;
	if( t ) str += t + (t==1 ? ' decade ' : ' decades ');
	d %= 3652.5;
	d = d | 0;
	t = (d / 365.25) | 0;
	if( t ) str += t + (t==1 ? ' year ' : ' years ');
	d %= 365.25;
	d = d | 0;
	if( d ) str += d + (d==1 ? ' day ' : ' days ');
	return prefix + str;
}
var SELECT2_OPT = {
	matcher: function( params, data ) {
		if( !params.term ) return data;
		var term = H.Trim( params.term.toLowerCase() );
		var text = H.Trim( data.text.toLowerCase() );
		if( text.indexOf( term )>=0 || term=='' ) return data;
		var terms = term.split( ' ' );
		if( terms.length<=1 ) return null;
		for( var z in terms ) if( text.indexOf( terms[ z ] )<0 ) return null;
		return data;
	}
};
var FILE_UPLOAD_OPT = {
	url: '',
	dragDropStr: '',
	uploadButtonClass: 'btn btn-default btn-xs file-upload',
	statusBarWidth: 280,
	dragdropWidth: '100%',//200,
	allowedTypes: 'jpg,png,pdf,docx,odt',
	multiple: false,
	//grids: [],
	maxFileSize: 8 * 1024 * 1024, // 8MB
	onSuccess: function( files, data, xhr ) {
		//console.log( files, data, xhr );
		if( H.upload_count-- ) {
			/** this.grids cannot be used.
			 var grids = this.grids;
			 for( var z in grids ) {
				var grid = grids[ z ];
				window[ grid ].Update();
			}
			 */
			var grid = H.upload_grids[this.extraData['key']];
			window[ grid ].Update();
		}
		/** @namespace xhr.responseJSON */
		var res = xhr.responseJSON || xhr.responseText;
		if( 'string'== typeof res ) res = H.StrToObject( res );
		if( H.HasAjaxErrors( res ) ) return;
		H.GrowlInfo( ITALIC( 'File(s) Uploaded Successfully' ) + BR() + res.info );
	},
	onError: function( files, status, errMsg ) {
		//console.log( files, status, errMsg );
		--H.upload_count;
		H.GrowlError( status + ' ' + errMsg + ' ' + files );
	},
	onSubmit: function( files ) {
		//console.log( this );
		++H.upload_count;
	}
}; // upload options, see: http://hayageek.com/docs/jquery-upload-file.php
var TOGGLE_PLEASEDONT_OPT = { on: 'Please', off: "Don't", size: 'mini' };
var TOGGLE_MERGETRIM_OPT = { on: 'Merge', off: "Trim", size: 'mini' };
var TOGGLE_YN_OPT = { on: 'Yes', off: 'No', size: 'mini' };
var TOGGLE_YN_UCASE_OPT = { on: 'YES', off: 'NO', size: 'mini' };
var TOGGLE_IDRUSD_OPT = { on: 'USD', off: 'IDR', size: 'mini' };
var TOGGLE_CURRENCY_OPT = { on: 'Other', off: 'IDR', size: 'mini' };
var TOGGLE_HIDESHOW_OPT = { on: 'Show', off: 'Hide', size: 'mini' };
var TOGGLE_PARTFULL_OPT = { on: 'Full', off: 'Part', size: 'mini' };
var TOGGLE_CHECK_OPT = { on: 'Check', off: 'Uncheck', size: 'mini' };


// anti-XSS for attributes
function Z( txt ) {
	if( !txt ) return '""';
	txt = '' + txt;
	return '"' + txt.replace( /</g, '&lt;' ).replace( />/g, '&gt;' ).replace( /"/g, '&quot;' ) + '"';
}
// just quote any attribute (for numbers or trusted text)
function Q( n ) {
	return '"' + n + '"';
}
// function for check date string YYYY-MM-DD
function isValidDateYMD( str ) {
	if( str=='' || str==null ) {
		return false;
	}
	var m = str.match( /(\d{4})-(\d{2})-(\d{2})/ );
	if( m===null || typeof m!=='object' ) {
		return false;
	}
	var res = true;
	var minYear = new Date().getFullYear();
	var maxYear = new Date().getFullYear() + 1;
	if( (m[ 1 ].length<4) || m[ 1 ]<minYear || m[ 1 ]>maxYear ) {
		res = false;
	}
	if( (m[ 1 ].length<2) || m[ 2 ]<1 || m[ 2 ]>12 ) {
		res = false;
	}
	if( (m[ 1 ].length<2) || m[ 3 ]<1 || m[ 3 ]>31 ) {
		res = false;
	}
	return res;
}
// function for check is an Object is empty
function isEmptyObject( obj ) {
	for( var prop in obj ) {
		if( obj.hasOwnProperty( prop ) )
			return false;
	}
	return true;
}
// function for check an input is numeric or not
function isNumeric( n ) {
	return !isNaN( parseFloat( n ) ) && isFinite( n );
}

// for PU
function Grader( num ) {
	num = parseFloat( num );
	if( num>=85.0 ) return 'A';
	if( num>=70.0 ) return 'B';
	if( num>=60.0 ) return 'C';
	if( num>=55.0 ) return 'D';
	else return 'E';
}

// 2020-09-18 Sofyan | Grading New Policy
function GraderNew( num ) {
	num = parseFloat( num );
	if( num>=85.0 ) return 'A';
	if( num>=80.0 ) return 'A-';
	if( num>=75.0 ) return 'B+';
	if( num>=70.0 ) return 'B';
	if( num>=67.0 ) return 'B-';
	if( num>=64.0 ) return 'C+';
	if( num>=60.0 ) return 'C';
	if( num>=55.0 ) return 'D';
	else return 'E';
}

// for PU
function GradeNumer( num ) {
	num = parseFloat( num );
	if( num>=85.0 ) return 4;
	if( num>=70.0 ) return 3;
	if( num>=60.0 ) return 2;
	if( num>=55.0 ) return 1;
	else return 0;
}

// 2020-09-18 Sofyan | Grading New Policy
function GradeNumerNew( num ) {
	num = parseFloat( num );
	if( num>=85.0 ) return 4;
	if( num>=80.0 ) return 3.67;
	if( num>=75.0 ) return 3.33;
	if( num>=70.0 ) return 3;
	if( num>=67.0 ) return 2.67;
	if( num>=64.0 ) return 2.33;
	if( num>=60.0 ) return 2;
	if( num>=55.0 ) return 1;
	else return 0;
}

function GraderRemedial( num ) {
	num = parseFloat( num );
	if( num>=60.0 ) return 'C';
	else return 'E';
}

// for PU
function GradeLetterNum( letter ) {
	switch( letter ) {
		case 'A':
			return 4;
		case 'B':
			return 3;
		case 'C':
			return 2;
		case 'D':
			return 1;
	}
	return 0;
}

// for PU
function GradeNumericLetter( numeric ) {
	var idx = [ 'E', 'D', 'C', 'B', 'A' ];
	return idx[ numeric ];
}

// convert iso date to string date
function ISODateToStrDate( iso_date ) {
	if( !(moment( iso_date ).isValid) ) {
		return false;
	}
	return moment( iso_date ).format( 'D MMMM YYYY' );
}

function Left( str, n ) {
	if( n<=0 )
		return "";
	else if( n>String( str ).length )
		return str;
	else
		return String( str ).substring( 0, n );
}

function Right( str, n ) {
	if( n<=0 )
		return "";
	else if( n>String( str ).length )
		return str;
	else {
		var iLen = String( str ).length;
		return String( str ).substring( iLen, iLen - n );
	}
}

// Convert first letter in word to capital
function CapitalizeWord( inStr ) {
	return inStr.replace( /\w\S*/g, function( tStr ) {
		return tStr.charAt( 0 ).toUpperCase() + tStr.substr( 1 ).toLowerCase();
	} );
}

// Show commas on number
function NumberWithCommas( numeric ) {
	var parts = numeric.toString().split( "." );
	parts[ 0 ] = parts[ 0 ].replace( /\B(?=(\d{3})+(?!\d))/g, "," );
	return parts.join( "." );
}

// lock all input letter beside number
function LockIntegerNumber( elem ) {
	$( elem ).keydown( function( e ) {
		// Allow: backspace, delete, tab, escape, enter, ctrl+A
		if( $.inArray( e.keyCode, [ 46, 8, 9, 27, 13, 110 ] )!== -1 ||
			(e.keyCode==65 && ( e.ctrlKey===true || e.metaKey===true ) ) ||
			(e.keyCode>=35 && e.keyCode<=40) ) {
			return;
		}
		if( (e.shiftKey || (e.keyCode<48 || e.keyCode>57)) && (e.keyCode<96 || e.keyCode>105) ) {
			e.preventDefault();
		}
	} );
}

function LockIntegerPositiveNegative( elem ) {
	$( elem ).keydown( function( e ) {
		// Allow: backspace, delete, tab, escape, enter, ctrl+A, dash
		if( $.inArray( e.keyCode, [ 46, 8, 9, 27, 13, 110, 189 ] )!== -1 ||
			(e.keyCode==65 && ( e.ctrlKey===true || e.metaKey===true ) ) ||
			(e.keyCode>=35 && e.keyCode<=40) ) {
			return;
		}
		if( (e.shiftKey || (e.keyCode<44 || e.keyCode>57)) && (e.keyCode<96 || e.keyCode>105) ) {
			e.preventDefault();
		}
	} );

	//$(elem).keypress(function (e) {
	//	// Allow: backspace, delete, tab, escape, enter, ctrl+A, dash
	//
	//	e = e || window.event;
	//	var charCode = e.which || e.keyCode || e.charCode;
	//
	//		if ($.inArray(charCode, [46, 8, 9, 27, 13, 110, 189]) !== -1 ||
	//			(charCode == 65 && ( e.ctrlKey === true || e.metaKey === true ) ) ||
	//			(charCode >= 35 && charCode <= 40)) {
	//			return;
	//		}
	//		if ((e.shiftKey || (charCode < 44 || charCode > 57)) && (charCode < 96 || charCode > 105)) {
	//			e.preventDefault();
	//		}
	//});
}

// check time format
// return boolean
function isValidTime( str ) {
	if( str ) {
		var regexp = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]$/;
		return regexp.test( str );
	}
	return true;
}

// return enable Bootstrap Confirm Dialog / BootstrapDialog.confirm
function enableConfirmButton( ok ) {
	var pull_left = $( '.pull-left' );
	var pull_right = $( '.pull-right' );
	if( !ok ) {
		pull_left.removeClass( 'disabled' );
		pull_left.removeAttr( 'disabled', true );
		pull_right.removeClass( 'disabled' );
		pull_right.removeAttr( 'disabled', true );
		return;
	}
}

// negative value for tax cost_component
function setNegativeCostTax( cost_name, price ) {
	if ( ((cost_name).toLowerCase()).indexOf('pph 21') > -1 || ((cost_name).toLowerCase()).indexOf('pph 23') > -1 || ((cost_name).toLowerCase()).indexOf('pph 26') > -1 || ((cost_name).toLowerCase()).indexOf('pph pasal 4 ayat 2') > -1 || ((cost_name).toLowerCase()).indexOf('potongan') > -1 ){
		price = (-1) * Math.abs(price);
	}
	return price;
}

function unsetValueAutocomplete( id ){
	var el = $('#'+id);
	var el_suggestion = $('#'+id+'__suggestion');
	el.val('');
	el_suggestion.hide();
	return 'unsetValueAutocomplete("'+id+'")';
}

function ExamTime( exam_time ){
	var sess_time = '';
	switch( exam_time ) {
		case '1' :
			sess_time = '08:30 - 11:00';
			break;
		case '2' :
			sess_time = '11:30 - 14:00';
			break;
		case '3' :
			sess_time = '14:30 - 17:00';
			break;
		case '4' :
			sess_time = '18:30 - 21:00';
			break;
		case '7' :
			sess_time = '07:00 - 09:00';
			break;
		case '8' :
			sess_time = '08:00 - 10:00';
			break;
		case '9' :
			sess_time = '09:00 - 11:00';
			break;
		case '10' :
			sess_time = '10:00 - 12:00';
			break;
		case '11' :
			sess_time = '11:00 - 13:00';
			break;
		case '12' :
			sess_time = '12:00 - 14:00';
			break;
		case '13' :
			sess_time = '13:00 - 15:00';
			break;
		case '14' :
			sess_time = '14:00 - 16:00';
			break;
		case '15' :
			sess_time = '15:00 - 17:00';
			break;
		case '16' :
			sess_time = '16:00 - 18:00';
			break;
		case '17' :
			sess_time = '17:00 - 19:00';
			break;
		case '18' :
			sess_time = '18:00 - 20:00';
			break;
		case '20' :
			sess_time = '20:00 - 22:00';
			break;
		default :
			sess_time = ' - ';
			break;
	}
	return sess_time;
}