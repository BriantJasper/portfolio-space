var H = H || {};
H.trace_function = true;
window.unescape = window.unescape || window.decodeURI;
// upload count
H.upload_count = 0;
H.upload_grids = {}; // {field_name: grid_name}
// execute obj.function_name if it's a function
H.ExecIfMethod = function (obj, function_name, params) {
    //H.Trace(arguments);
    if (!obj) return params;
    var func = obj[function_name];
    if (!func) return params;
    if ("function" != typeof func) {
        throw "cannot execute non-method";
    }
    func = func.bind(obj); // ensure correct context
    return func(params); // execute
};
H.ExecIfFunction = function (func, params) {
    //H.Trace(arguments);
    if (!func || "function" != typeof func) return params;
    return func(params);
};
// convert json string to object, useful for getting JSON AJAX response
H.StrToObject = function (str) {
    //H.Trace(arguments);
    if ('object' == typeof str) return str;
    if ('string' != typeof str) {
        throw ('cannot parse non-json-string')
    }
    if (str == '') return str;
    return eval('(' + str + ')'); // JSON.parse
};
// convert Js map's inner text to object (not always json)
// TODO: deprecate this function
H.TextToObject = function (str) {
    //H.Trace(arguments);
    if ('object' == typeof str) return str;
    if ('string' != typeof str) {
        throw ('cannot parse non-js-text')
    }
    return eval('({' + str + '})')
};
// stack trace
H.Trace = function () {
    if (!H.trace_function) return;
    var stack = _.filter(new Error().stack.split("\n"), function (txt) {
        return txt.indexOf("jquery") === -1;
    });
    stack.shift();
    stack.shift();
    var str = "";
    var len = stack.length - 1;
    for (var z = 0; z < len; ++z) str += " ";
    console.log("FUNCTION TRACE:", len, str, stack[0], arguments[0]);
};
// ajax post, fill values._url if the target url differ from current url
H.Post = function (values, success_callback, error_callback) {
    H.Trace(arguments);
    let url = "";
    if (values._url != null) {
        url = values._url;
        delete values._url;
    }
    $.post(url, values, function (res) {
        H.Trace(arguments);
        H.ExecIfFunction(success_callback, res);
    }).fail(function (xhr, textStatus, errorThrown) {
        H.Trace(arguments);
        xhr.textStatus = textStatus;
        xhr.errorThrown = errorThrown;
        H.ExecIfFunction(error_callback, xhr);
        if (!errorThrown) errorThrown = "unable to load resource, network connection or server is down?";
        H.GrowlError(textStatus + " " + errorThrown + "<br/>" + xhr.responseText);
    });
};
// ajax post, fill values._url if the target url differ from current url
H.SimplePost = function (data, success_callback, fail_callback) {
    $.ajax({
        url: "",
        type: "POST",
        data: data,
        cache: false,
        contentType: false,
        processData: false,
    })
        .done(function (res) {
            if (typeof success_callback == "function") {
                success_callback(res);
            }
        })
        .fail(function (xhr, textStatus, errorThrown) {
            if (typeof fail_callback == "function") {
                fail_callback(xhr, textStatus, errorThrown);
            }
        });
};
// growl
toastr.options = {
    closeButton: true,
    debug: false,
    positionClass: "toast-top-right",
    onclick: null,
    showDuration: "6000",
    hideDuration: "2000",
    timeOut: "6000",
    extendedTimeOut: "2000",
    showEasing: "swing",
    hideEasing: "linear",
    showMethod: "fadeIn",
    hideMethod: "fadeOut",
};
H.GrowlError = function (msg) {
    toastr.error(msg, "Error");
};
H.GrowlInfo = function (msg) {
    toastr.info(msg, "Info");
};
H.GrowlWarning = function (msg) {
    toastr.warning(msg, "Warning");
};
H.GrowlSuccess = function (msg) {
    toastr.success(msg, "Success");
};
// open new tab, should start with slash
H.OpenNewTab = function (url) {
    if (url && url[0] == "/") {
        window.open(url, url);
        return H.GrowlInfo("Opening new in tab: " + url);
    }
    H.GrowlError(url);
};
// open url, enrich OpenNewTab
H.OpenURL = function (url) {
    window.open(url, "_self");
};
H.OpenURLBlank = function (url) {
    window.open(url, "_blank");
};
// open url in a new tab if not haven't
H.OpenURLInTab = function (url, window_name) {
    window.open(url, window_name ? window_name : url);
};
// statusbar, do not call this function
H.StatusBar = function (sel, options) {
    var self = this;
    var elem = null;
    // options
    this.prependMultiline = true;
    this.showCloseButton = false;
    this.afterTimeoutText = "";
    this.cssClass = "statusbar";
    this.highlightClass = "btn btn-primary";
    this.errorClass = "btn btn-warning";
    this.closeButtonClass = "statusbarclose";
    this.additive = false;
    $.extend(this, options);
    if (sel) elem = $(sel);
    // create statusbar object manually
    if (!elem) {
        elem = $(
            "<div id='_statusbar' class='" +
            self.cssClass +
            "'>" +
            "<div class='" +
            self.closeButtonClass +
            "'>" +
            (self.showCloseButton ? " X </div></div>" : "")
        )
            .appendTo(document.body)
            .show();
    }
    if (self.showCloseButton)
        $("." + self.cssClass).click(function () {
            $(elem).hide();
        });
    this.show = function (message, timeout, isError) {
        if (self.additive) {
            var html = "<div style='margin-bottom: 2px;' >" + message + "</div>";
            if (self.prependMultiline) elem.prepend(html);
            else elem.append(html);
        } else {
            if (!self.showCloseButton) elem.text(message);
            else {
                var t = elem.find("div.statusbarclose");
                elem.text(message).prepend(t);
            }
        }
        elem.show();
        if (timeout) {
            if (isError) elem.addClass(self.errorClass);
            else elem.addClass(self.highlightClass);
            setTimeout(function () {
                elem.removeClass(self.highlightClass);
                self.show(self.afterTimeoutText);
            }, timeout);
        }
    };
    this.release = function () {
        if (_statusbar) $(_statusbar).remove();
    };
};
var _statusbar = null;
H.SetStatus = function (message, timeout, additive, isError) {
    if (!_statusbar) _statusbar = new H.StatusBar();
    if (!timeout) timeout = 30;
    timeout *= 1000;
    _statusbar.show(message, timeout, additive, isError);
};
BootstrapDialog.error = function (message, callback) {
    new BootstrapDialog({
        title: "Error",
        type: BootstrapDialog.TYPE_WARNING,
        message: message,
        closable: true,
        draggable: true,
        animate: false,
        buttons: [
            {
                label: "OK",
                action: function (dialog) {
                    dialog.close();
                },
            },
        ],
        onhide: function () {
            H.ExecIfFunction(callback);
            //$( 'body' ).css( 'overflow', 'scroll' );
        },
    }).open();
};
// highlight json
H.HighlightJson = function (json, full) {
    if (typeof json != "string") json = JSON.stringify(json, null, 2);
    json = json.replace(/</g, "&lt;").replace(/>/g, "&gt;"); // replace(/&/g, '&amp;')
    var pattern =
        /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g;
    var html = json.replace(pattern, function (match) {
        var cls = "number";
        var suffix = "";
        if (/^"/.test(match)) {
            if (/:$/.test(match)) {
                cls = "key";
                match = match.slice(0, -1);
                suffix = ":";
            } else {
                cls = "string";
            }
        } else if (/true|false/.test(match)) {
            cls = "boolean";
        } else if (/null/.test(match)) {
            cls = "null";
        }
        return '<span class="' + cls + '">' + match + "</span>" + suffix;
    });
    return PREjson(html, !!full);
};
H.dmp = new diff_match_patch();
// diff and highlight
H.HighlightDiff = function (text1, text2) {
    if (text1 == text2) return "";
    var d = H.dmp.diff_main("" + text1, "" + text2, null, 0);
    return H.dmp.diff_prettyHtml(d);
};
// horizontal loading
H.HorizontalLoading = function (id) {
    H.Trace(arguments);
    var str = '<img src="/img/horizontal-loading.gif" title="please wait.." />';
    if (!id) return str;
    var el = H.JQuerify(id);
    el.show();
    el.html(str);
    return el;
};

// horizontal loading
H.CustomLoading = function (id, gif, msg) {
    H.Trace(arguments);
    var str = '<img src="/img/' + gif + '.gif" title="please wait.." />' + msg;
    if (!id) return str;
    var el = H.JQuerify(id);
    el.show();
    el.html(str);
    return el;
};

H.InlineLoadingBar = function (loader_id, is_enabled) {
    if (is_enabled) {
        H.EnableInputs("body", false, true);
        return H.HorizontalLoading(loader_id); // H.CustomLoading( '#inline-loader', 'loading-bar-inline', '' );
    }
    H.EnableInputs("body", true, true);
    var el = H.JQuerify(loader_id);
    el.html("");
    return el;
};

H.EnableInputs = function (parent, is_enabled, preserveOldState) {
    var selections = $(parent).find("input,select,button:not(#c-button--slide-left),textarea");
    if (!is_enabled) {
        if (preserveOldState) {
            // store state for already-disable-inputs using class
            selections.not(":disabled").addClass("hilb-disabled").prop("disabled", true);
        } else {
            selections.prop("disabled", true);
        }
    } else {
        if (preserveOldState) {
            $(".hilb-disabled").prop("disabled", false).removeClass("hilb-disabled");
        } else {
            selections.prop("disabled", false);
        }
    }
};
/*H.EnableInputs = function( parent, is_enabled ) {
    $( parent ).find('input,select,button,textarea').prop('disabled', !is_enabled );
};*/

H.ClearContent = function (id) {
    return H.JQuerify(id).text("");
};
// shortcut to handle ajax errors
H.HasAjaxErrors = function (res, status, callback) {
    let err = res.errors;
    if (!err && "string" == typeof res) {
        err = [res];
    }
    if (err && err.length) {
        err = err.join(BR());
        BootstrapDialog.error(err, function () {
            //$( 'body' ).css( 'overflow', 'scroll' );
            H.SetStatus(status);
            H.ExecIfFunction(callback);
        });
        H.Loading(false); // disable loading if any
        return true;
    }
    return false;
};
H.IsAjaxErrors = function (res) {
    let err = res.errors;
    if (!err && "string" == typeof res) {
        err = [res];
    }
    if (err && err.length) {
        H.Loading(false); // disable loading if any
        return true;
    }
    return false;
};
H.Base64 = function (str) {
    return window.btoa(window.unescape(window.encodeURIComponent(str)));
};
// convert any html table to excel
H.TableToExcel = function (id, name, callback_cleaned, callback) {
    // var uri = 'data:application/vnd.ms-excel;base64,';
    // var template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>';
    // var format = function( s, c ) {
    // 	return s.replace( /{(\w+)}/g, function( m, p ) {
    // 		return c[ p ];
    // 	} )
    // };
    // var worksheet_name = H.StripPunct( name || 'Worksheet' ).substr( 0, 31 );

    var table = H.JQuerify(id);
    var table_clone = table.clone();
    table_clone.find("tr.del").remove();

    if (table.prop("tagName") != "TABLE" || table_clone.prop("tagName") != "TABLE") {
        table = table.find("table").first();
        table_clone = table_clone.find("table").first();
    }

    /*
     // TODO: apply styling to exported table
     table = table.clone();
     table.find('*').each(function(idx,el){
     if(document.defaultView && document.defaultView.getComputedStyle) {
     strValue = document.defaultView.getComputedStyle(el, "");
     // remove unused styles
     } else if(el.currentStyle) {
     }
     $(el).css('prop','value');
     });
     */
    var check_box = table_clone.find('input[type="checkbox"]:checked').parent().closest("div");
    var check_box2 = table_clone.find('input[type="checkbox"]:checked').parent().closest("td");
    check_box.html("TRUE");
    check_box2.html("TRUE");
    table_clone.table2excel({
        // file nya ada di public/js/table2excel/dist/jquery.table2xcel.min.js
        exclude: ".noExl",
        name: "Excel Document Name",
        filename: name,
        fileext: ".xls",
        exclude_img: true,
        exclude_links: true,
        exclude_inputs: true,
    });
    // var table_html = '';
    // table = table.clone();
    // // clean the toolbox icons
    // var tds = table.find( 'thead > tr' ).eq( 1 ).children();
    // for( var z in tds ) {
    // 	var td = tds[ z ];
    // 	td.innerHTML = '';
    // }
    // if( 'function'== typeof callback ) table = callback( table );
    // // replace checkbox
    // $( table ).find( 'input:checked' ).each( function() {
    // 	$( this ).replaceWith( 'true' );
    // } );
    // $( table ).find( 'div.ajax-upload-dragdrop' ).each( function() {
    // 	var el = $( this ).parent();
    // 	var child = el.children().last()[ 0 ];
    // 	el.text( child.innerText + ' ' + child.href );
    // } );
    // // replace items that cannot be exported
    // $( table ).find( 'img, a, button, tr.del, input, .dropdown-menu' ).remove(); // remove all unused tags before exporting
    // if( 'function'== typeof callback_cleaned ) table_html = callback_cleaned( table );
    // else table_html = table.html();
    // var table_html2 = table_html.replace( /☐/g, " " ); // replace simbol ☐ dengan ' '
    // table_html = table_html2.replace( /···/g, "---" ); // replace simbol ... dengan ---
    // var ctx = { worksheet: worksheet_name, table: table_html };
    // var el = $( "<a download='" + name + ".xls' href='" + uri + H.Base64( format( template, ctx ) ) + "'></a>" );
    // el.appendTo( document.body );
    // el[ 0 ].click();
    // el.remove();
};
// 2024-08-12 Setiaji
H.TableToExcel_New = (tableID, filename = '') => {
    const table = document.querySelector(`table#${tableID}`);
    const tempTable = table.cloneNode(true);
    const rows = tempTable.querySelectorAll('tr');
    rows.forEach(row => {
        const cells = Array.from(row.cells);
        if (cells.every(cell => cell.classList.contains('no-export'))) row.remove();
    })
    // Konversi table ke sheet
    const wb = XLSX.utils.table_to_book(tempTable, {sheet: "Sheet1"});
    // Set nama file
    filename = filename ? filename + '.xlsx' : 'excel_data.xlsx';
    // Ekspor dan download file
    XLSX.writeFile(wb, filename);
}


// generate function that returns label from key
H.DefaultLabeler = function (key, hash, idx, def_label) {
    if (!idx) idx = 0;
    if (!def_label) def_label = '-';
    if ('object' != typeof hash) throw ('hash must not be empty, for: ' + key);
    return function (row) {
        var label = hash[row[key]];
        if (typeof label == 'object') label = label[idx];
        if (!label) label = def_label;
        return label;
    }
};
// generate functon that returns link label from key
H.LinkLabeler = function (key) {
    return function (row) {
        if (!row[key]) return "";
        var url = row[key] + "";
        return A(url, url.split("/").join(" / "), url);
    };
};
// clone an object, non-recursive copy
H.Clone = function (obj) {
    //return Object.create(obj);
    //return JSON.parse(JSON.stringify(obj));
    if (_.isArray(obj)) return obj.slice(0);
    var target = {};
    for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
            target[i] = obj[i];
        }
    }
    return target;
};
// deep/recursive cloning
H.DeepClone = function (obj) {
    return $.extend(true, {}, obj);
};
// log in string
H.Log = function () {
    var stack = _.filter(new Error().stack.split("\n"), function (txt) {
        return txt.indexOf("jquery") === -1;
    });
    stack.shift();
    stack.shift();
    var args = Array.prototype.slice.call(arguments);
    for (var z in args) args[z] = JSON.stringify(arguments[z], null, 2);
    console.log(stack.join("\n"), args.join("\n"));
};
// split string to array
H.Split = function (str, substr) {
    return (str || "").split(substr);
};
// trim string, old browser (IE<9, GC<10, FF<3.5, Saf<5, Op<10.5)
H.Trim = function (str) {
    if (str && "function" == typeof str.trim) return str.trim();
    return ("" + str).replace(/^\s+|\s+$/gm, "");
};
// remove common invalid characters
H.Nullify = function (str) {
    str = H.Trim(str);
    if (
        str == "0" ||
        str == "1" ||
        str == "-" ||
        str == "--" ||
        str == "undefined" ||
        str == "null" ||
        str == " " ||
        str == "  " ||
        str == "" ||
        str == "." ||
        str == "o"
    )
        return null;
    return str;
};
// strip punctuations
H.StripPunct = function (str) {
    return (str + "").replace(/[\.,-\/#!$%\^&\*;:{}=\-_`~()]/g, " ").replace(/\s{2,}/g, " ");
};
// strip punctuations, remove spaces
H.StripTrim = function (str) {
    return (str + "").replace(/[\.,-\/#!$%\^&\*;:{}=\-_`~()\s]/g, "").toLowerCase();
};
// str1 is substring of str2, or vice versa
H.BiContain = function (str1, str2) {
    str1 = H.StripTrim(str1).replace(/\s{2,}/g, " ");
    str2 = H.StripTrim(str2).replace(/\s{2,}/g, " ");
    if (str1.indexOf(str2) >= 0) return 1;
    if (str2.indexOf(str1) >= 0) return -1;
    return 0;
};
// if not contain each other, show the diff
H.NotContainDiff = function (str1, str2) {
    if (H.BiContain(str1, str2)) return "";
    return H.HighlightDiff(str1, str2);
};
// hightlight diff with ignore case, trimmed first
H.LowerDiff = function (str1, str2) {
    str1 = H.StripPunct(str1).toLowerCase();
    str2 = H.StripPunct(str2).toLowerCase();
    if (str1 == str2) return "";
    return H.HighlightDiff(str1, str2);
};
// binary search insertion (integer only)
H.BinarySearchInsertion = function (arr, val) {
    var min = 0;
    var max = arr.length - 1;
    while (min <= max) {
        var idx = Math.floor((min + max) / 2);
        var cur = arr[idx];
        if (cur < val) {
            min = idx + 1;
        } else if (cur > val) {
            max = idx - 1;
        } else return arr; // nothing to insert
    }
    arr.splice(idx, 0, val);
    return arr;
};
// binary search deletion (integer only)
H.BinarySearchDeletion = function (arr, val) {
    var min = 0;
    var max = arr.length - 1;
    while (min <= max) {
        var idx = ((min + max) / 2) | 0;
        var cur = arr[idx];
        if (cur < val) {
            min = idx + 1;
        } else if (cur > val) {
            max = idx - 1;
        } else {
            if (val == cur) arr.splice(idx, 1);
            break;
        }
    }
    return arr;
};
// convert to titlecase
H.TitleCase = function (str, glue) {
    if (!str) return str;
    glue = glue ? glue : ["of", "for", "and"];
    return str.replace(/(\w)(\w*)/g, function (_, i, r) {
        var j = i.toUpperCase() + (r != null ? r : "");
        return glue.indexOf(j.toLowerCase()) < 0 ? j : j.toLowerCase();
    });
};
// generate event trigger
H.triggerCompleteChangeAttr = function (handler) {
    if (!handler) return "";
    var prop = "";
    prop +=
        ' onblur="' +
        handler +
        '(event,this)" onkeyup="' +
        handler +
        '(event,this)" onkeydown="' +
        handler +
        '(event,this)" onchange="' +
        handler +
        '(event,this)" ';
    return prop;
};
// convert map {title:'bla',placeholder:'123'} to attributes 'title="bla" placeholder="123"'
H.MapToAttr = function (map) {
    if (!map) return "";
    if ("string" == typeof map) return map;
    var str = " ";
    for (var z in map) {
        var v = map[z];
        if (v === null || v === undefined) continue;
        if (z == "trigger") {
            if (!map.disabled) str += H.triggerCompleteChangeAttr(map.trigger);
            continue;
        }
        str += z + "=" + '"' + v + '" ';
    }
    return str;
};
// convert 2 dimensional array (opt.rows and opt.fields) to grid
H.GridView = function (container_id, opt) {
    H.Trace(arguments);
    var thead = TH("No.");
    var fields = opt.fields;
    var rows = opt.rows;
    if (!fields) throw 'GridView requires "fields" object key on the 2nd parameter';
    if (!rows) throw 'GridView requires "rows" object key on the 2nd parameter';
    // header
    var y, col;
    for (y = 0; y < fields.length; ++y) {
        col = fields[y];
        if ("string" == typeof col) {
            thead += TH(col);
        } else {
            thead += TH(col.header);
        }
    }
    thead = THEAD(TR(thead));
    // body
    var tbody = "";
    var sum = {};
    for (var z = 0; z < rows.length; ++z) {
        var row = rows[z];
        var tr = TDn(z + 1);
        for (y = 0; y < fields.length; ++y) {
            col = fields[y];
            var cell = row[y];
            switch (col.type) {
                case "number":
                    tr += TDn(cell);
                    if (col.footer == "__SUM__") {
                        if (!sum[y]) sum[y] = 0;
                        sum[y] += +cell;
                    }
                    break;
                case "tsem":
                    tr += TDtsem(cell);
                    break;
                case "datetime":
                    tr += TDdatetime(cell);
                    break;
                default:
                    tr += TD(cell);
            }
        }
        tbody += TR(tr);
    }
    tbody = TBODY(tbody);
    // footer
    var tfoot = TD("");
    for (y = 0; y < fields.length; ++y) {
        col = fields[y];
        if ("string" == typeof col) {
            tfoot += TD(col);
        } else if ("object" == typeof col) {
            tfoot += TD(col.footer);
        } else {
            tfoot += TDn(sum[y]);
        }
    }
    tfoot = TFOOT(tfoot);
    var el = H.JQuerify(container_id);
    el.html(TABLE(thead + tbody + tfoot));
    return el;
};
// generate bigram
H.NgramArray = function (str, len) {
    str = ("" + str).toLowerCase();
    var big = [];
    for (var z = 0; z <= str.length - len; ++z) big.push(str.substr(z, len));
    return big;
};
H.SimilarTo = function (needle, hay) {
    var len = 3;
    var pair1 = H.NgramArray(needle, len);
    var pair2 = H.NgramArray(hay, len);
    var intersection = 0;
    for (var z = 0; z < pair1.length; ++z) {
        for (var y = 0; y < pair2.length; ++y) {
            if (pair1[z] == pair2[y]) {
                intersection += 1;
                pair2.splice(y, 1);
                break;
            }
        }
    }
    return intersection / pair1.length;
};
H.loadScript = function (src, callback) {
    H.Trace(arguments);
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = src;
    script.addEventListener(
        "load",
        function (e) {
            H.ExecIfFunction(callback, e);
        },
        false
    );
    var head = document.getElementsByTagName("head")[0];
    head.appendChild(script);
};
// sources is array, the load process is serial
H.loadScripts = function (sources, callback) {
    H.Trace(arguments);
    var len = sources.length;
    var now = -1;
    var loadOne = function () {
        ++now;
        if (now >= len) return H.ExecIfFunction(callback);
        H.loadScript(sources[now], loadOne);
    };
    loadOne();
};
// get greatest value on array
H.LargestVal = function (arr) {
    var max = null;
    for (var z in arr) if (max == null || arr[z] > max) max = arr[z];
    return max;
};
// max of anything
H.Max = function (a, b) {
    if (a == null || b > a) return b;
    if (b == null || a > b) return a;
    return a;
};
// min of anything
H.Min = function (a, b) {
    if (a == null || b < a) return b;
    if (b == null || a < b) return a;
    return a;
};
// total SUM
H.SumArray = function (arr) {
    var total = 0;
    for (var z in arr) total += arr[z] | 0;
    return total;
};
// set zero then add
// for example: row.sum = H.Add(row.sum, other.sum);
H.Add = function (val1, val2) {
    val1 = +val1;
    val2 = +val2;
    if (!val1) val1 = 0;
    if (!val2) val2 = 0;
    return val1 + val2;
};
// set zero then increment
// for example: row[key] = H.Inc(row[key]);
H.Inc = function (val1) {
    val1 = +val1;
    if (!val1) return 1;
    return val1 + 1;
};
// create counter
H.CreateIndex = function () {
    var counter = 0;
    var hash = {};
    var fun = function (key) {
        if (hash[key]) return hash[key];
        hash[key] = ++counter;
        return counter;
    };
    fun.debug = function () {
        console.log("CreateIndex", counter, hash);
    };
    return fun;
};
// return first element of array or return string if is a string
H.FirstField = function (obj) {
    if ("object" != typeof obj) return obj;
    for (var z in obj) return obj[z];
};
H.First2Field = function (obj, separator) {
    if (obj === null) return "";
    if ("object" != typeof obj) return obj;
    if (obj[1]) return obj[0] + separator + obj[1];
    return obj[0];
};
// check if string start with digit
H.IsNumeric = function (str) {
    if (!str) return false;
    return parseInt(str) > 0;
};
// find best of an object {A:1,B:4,C:3} // returns B
H.KeyWithLargestVal = function (obj) {
    var best;
    for (var z in obj) {
        best = z;
        break;
    }
    for (z in obj) if (obj[best] < obj[z]) best = z;
    return best;
};
// count substring occurence
H.CountSubstr = function (str, substr, allowOverlapping) {
    str += "";
    substr += "";
    if (substr.length <= 0) return str.length + 1;
    var n = 0,
        pos = 0;
    var step = allowOverlapping ? 1 : substr.length;
    while (true) {
        pos = str.indexOf(substr, pos);
        if (pos < 0) break;
        ++n;
        pos += step;
    }
    return n;
};
// incremenet object key, set with zero if not exists
H.IncObjKey = function (obj, key, val) {
    if (!obj[key]) obj[key] = 0;
    if (val == null) val = 1;
    obj[key] += +val;
    return obj;
};
// increase object key
H.MaxObjKey = function (obj, key, val) {
    if (!obj[key] || obj[key] < val) obj[key] = val;
    return obj;
};
// append object key (array), set as empty array if not exists
H.PushObjKey = function (obj, key, val) {
    if (!obj[key]) obj[key] = [];
    obj[key].push(val);
    return obj;
};
// append object key (null), set as null if not exists
H.PushObjKey2 = function (obj, key, val) {
    if (!obj[key]) obj[key] = null;
    obj[key] = val > 0 ? val : 0;
    return obj;
};
// count object key as array, return zero if not array
H.CountObjKey = function (obj, key) {
    return (obj[key] || []).length || 0;
};
// set kv (object), set as empty object if not exists, return true if inserted, false if already exists
H.HashObjKey = function (obj, key, val) {
    if (!obj[key]) obj[key] = {};
    if (obj[key][val]) return false;
    obj[key][val] = val;
    return true;
};
// incremenet object key, set with zero if not exists
H.UpcaseArrayObjKey = function (obj, key) {
    for (var z in obj) {
        // uppercase lecturers
        var lec = obj[z];
        lec[key] = (lec[key] || "").toUpperCase();
    }
};
// load script with progress bar
H.loadScriptProgress = function (src, complete, progress) {
    var req = new XMLHttpRequest();
    req.addEventListener(
        "progress",
        function (event) {
            if (event.lengthComputable) {
                var p = ((event.loaded / event.total) * 10000) | (0 / 100.0);
                H.ExecIfFunction(progress, [event, p]);
            }
        },
        false
    );
    req.addEventListener(
        "load",
        function (event) {
            var e = event.target;
            var s = $("<script>");
            s.text(e.responseText);
            $(document.body).append(s);
            H.ExecIfFunction(complete, e);
        },
        false
    );
    req.open("GET", src);
    req.send();
};

// generate tabview, just like gridview, but the content of the tab generated by javascript instead of array
// tabs = {id:'Tab Title', ...}
// to switch tab, call arguments.callee.switchTab within on_change_Tab
// to set initial tab, call: changeTab( document.location.hash.substr( 1 ) || 'fallback_tab_id' )
H.TabView = function (container_id, tabs, on_change_tab) {
    var active = "active",
        tablist = "",
        tabcontent = "";
    var first = false;
    var prefix = "TAB__" + container_id;
    for (var id in tabs) {
        var val = tabs[id];
        var el_id = prefix + "__" + id;
        tablist +=
            '<li role="presentation" class="' +
            active +
            '"><a aria-controls="' +
            el_id +
            '" role="tab" href="#' +
            el_id +
            '" data-toggle="tab" onclick="' +
            on_change_tab.name +
            "(" +
            "'" +
            id +
            "'" +
            ')">' +
            val +
            "</a></li>";
        tabcontent += '<div role="tabpanel" class="tab-pane ' + active + '" id="' + el_id + '"></div>';
        active = "";
        if (!first) first = id;
    }
    var tab_html = "";
    tab_html += '<div role="tabpanel" id="' + prefix + '">';
    tab_html += '<ul class="nav nav-tabs" role="tablist">' + tablist + "</ul>";
    tab_html += '<div class="tab-content">' + tabcontent + "</div>";
    tab_html += "</div>";
    var el = H.JQuerify(container_id);
    el.html(tab_html);
    on_change_tab.switchTab = function (id) {
        $("ul.nav-tabs a[href=#" + prefix + "__" + id + "]").tab("show");
    };
};

// convert id string to element (GetElementById)
H.JQuerify = function (id) {
    if ("string" == typeof id && id[0] != "#") id = "#" + id;
    return $(id);
};
// get selected label
H.SelectedLabel = function (id) {
    return H.JQuerify(id).children("option").is("selected").text();
};
// convert any select to select2, order: -1 descending, +1 ascending, prepend/append: array[key,value]/use predefined below
H.Select2ify = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    order = order || 1;
    order_by_id = order_by_id || false;
    prepend = prepend || null;
    append = append || null;
    var el = H.JQuerify(id);
    if (el.data("select2")) el.select2("destroy");
    if ("string" == typeof datasource) el.html(datasource);
    else if (datasource) el.html(OPTIONs(datasource));
    el.parents(".modal").removeAttr("tabindex");
    var selectList = el.find("option");
    var orderFunc = function sort(a, b) {
        if (order_by_id) {
            a = parseInt(a.value);
            b = parseInt(b.value);
            if (a > b) return order;
            if (a < b) return -order;
            return 0;
        } else {
            var a1 = a.text.toLowerCase();
            var b1 = b.text.toLowerCase();
            if (a1[0] == "(" || b1[0] == "(") {
                if (a1[0] == "(" && b1[0] == "(") {
                    a = parseInt(a.value);
                    b = parseInt(b.value);
                    if (a > b) return order;
                    if (a < b) return -order;
                }
                return order;
            } else {
                if (a1 > b1) return order;
                if (a1 < b1) return -order;
                return 0;
            }
        }
    };
    if ("function" == typeof order) orderFunc = order;
    selectList.sort(orderFunc);
    el.html(selectList);
    if (prepend != null) el.prepend(OPTION(prepend[0], prepend[1], false));
    if (append != null) el.append(OPTION(append[0], append[1], false));

    if (val) {
        // check if val exist in ds
        let _val = val;
        if (!datasource[_val] && default_first) {
            // select default first, if any
            let _k = Object.keys(datasource);
            if (_k && _k.length > 0) {
                _val = _k[0];
            }
        }
        el.val(_val);
    } else if (!el.prop("multiple")) {
        // select first option
        el.find("option:selected").prop("selected", false);
        el.find("option:first").prop("selected", "selected");
    }
    return el.select2(SELECT2_OPT);
};
H.Select2ify_ALL = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.ALL),
        append,
        default_first
    );
};
H.Select2ify_CHOOSE = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.CHOOSE),
        append,
        default_first
    );
};
H.Select2ify_SELECT = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.SELECT),
        append,
        default_first
    );
};
H.Select2ify_NONE = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.NONE),
        append,
        default_first
    );
};
H.Select2ify_OTHER = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.OTHER),
        append,
        default_first
    );
};
H.Select2ify_UNSET = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.UNSET),
        append,
        default_first
    );
};
H.Select2ify_BLANK = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.BLANK),
        append,
        default_first
    );
};
H.Select2ify_CUSTOM = function (id, datasource, custom_label, val, order, order_by_id, prepend, append, default_first) {
    let custom_item = ["", custom_label];
    return H.Select2ify(
        id,
        datasource,
        val || "",
        order,
        order_by_id,
        $.extend(prepend, custom_item),
        append,
        default_first
    );
};
H.Select2ify_ALL0 = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "0",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.ALL0),
        append,
        default_first
    );
};
H.Select2ify_CHOOSE0 = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "0",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.CHOOSE0),
        append,
        default_first
    );
};
H.Select2ify_SELECT0 = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "0",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.SELECT0),
        append,
        default_first
    );
};
H.Select2ify_NONE0 = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "0",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.NONE0),
        append,
        default_first
    );
};
H.Select2ify_OTHER0 = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "0",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.OTHER0),
        append,
        default_first
    );
};
H.Select2ify_UNSET0 = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "0",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.UNSET0),
        append,
        default_first
    );
};
H.Select2ify_BLANK0 = function (id, datasource, val, order, order_by_id, prepend, append, default_first) {
    return H.Select2ify(
        id,
        datasource,
        val || "0",
        order,
        order_by_id,
        $.extend(prepend, DS.OPTIONS.BLANK0),
        append,
        default_first
    );
};
H.Select2ify_CUSTOM0 = function (
    id,
    datasource,
    custom_label,
    val,
    order,
    order_by_id,
    prepend,
    append,
    default_first
) {
    let custom_item = ["0", custom_label];
    return H.Select2ify(
        id,
        datasource,
        val || "0",
        order,
        order_by_id,
        $.extend(prepend, custom_item),
        append,
        default_first
    );
};

H.Select2ifySortAlphanumeric = function (id, datasource, val, order) {
    order = order || 1;
    var el = H.JQuerify(id);
    if (el.data("select2")) el.select2("destroy");
    if ("string" == typeof datasource) el.html(datasource);
    else if (datasource) el.html(OPTIONs(datasource));
    el.parents(".modal").removeAttr("tabindex");
    var selectList = el.find("option");
    var reA = /[^a-zA-Z]/g;
    var reN = /[^0-9]/g;
    var orderFunc = function sort(a, b) {
        a = a.text.toLowerCase();
        b = b.text.toLowerCase();

        var aA = a.replace(reA, "");
        var bA = b.replace(reA, "");
        if (aA === bA) {
            var aN = parseInt(a.replace(reN, ""));
            var bN = parseInt(b.replace(reN, ""));
            return aN === bN ? 0 : aN > bN ? 1 : -1;
        } else {
            return aA > bA ? order : -order;
        }
    };
    if ("function" == typeof order) orderFunc = order;
    selectList.sort(orderFunc);
    el.html(selectList);
    if (val) el.val(val);
    else if (!el.prop("multiple")) {
        // select first option
        el.find("option:selected").prop("selected", false);
        el.find("option:first").prop("selected", "selected");
    }
    return el.select2(SELECT2_OPT);
};

H.SortAlphanumeric = function (a, b) {
    var reA = /[^a-zA-Z]/g;
    var reN = /[^0-9]/g;

    a = a.text.toLowerCase();
    b = b.text.toLowerCase();

    var aA = a.replace(reA, "");
    var bA = b.replace(reA, "");
    if (aA === bA) {
        var aN = parseInt(a.replace(reN, ""));
        var bN = parseInt(b.replace(reN, ""));
        return aN === bN ? 0 : aN > bN ? 1 : -1;
    } else {
        return aA > bA ? order : -order;
    }
};

H.Select2ifyByClass = function (cls, datasource, val, order, order_by_id) {
    order = order || 1;
    var els = $("." + cls);
    els.each(function (i) {
        var el = $(this);
        if (el.data("select2")) el.select2("destroy");
        if ("string" == typeof datasource) el.html(datasource);
        else if (datasource) el.html(OPTIONs(datasource));
        el.parents(".modal").removeAttr("tabindex");
        var selectList = el.find("option");
        var orderFunc = function sort(a, b) {
            if (order_by_id) {
                a = parseInt(a.value);
                b = parseInt(b.value);
                if (a > b) return order;
                if (a < b) return -order;
                return 0;
            } else {
                a = a.text.toLowerCase();
                b = b.text.toLowerCase();
                if (!a || a[0] == "(" || !b || b[0] == "(") return -1;
                if (a > b) return order;
                if (a < b) return -order;
                return 0;
            }
        };
        if ("function" == typeof order) orderFunc = order;
        selectList.sort(orderFunc);
        el.html(selectList);
        if (val) el.val(val);
        else if (!el.prop("multiple")) {
            // select first option
            el.find("option:selected").prop("selected", false);
            el.find("option:first").prop("selected", "selected");
        }
        el.select2(SELECT2_OPT);
    });
};

// convert any select to select2, doesn't recreate
H.Select2ifyLazy = function (id, datasource, val) {
    var el = H.JQuerify(id);
    el.parents(".modal").removeAttr("tabindex");
    if (el.data("select2")) return el.val(val).trigger("change");
    if ("string" == typeof datasource) el.html(datasource);
    else el.html(OPTIONs(datasource));
    if (val) el.val(val);
    return el.select2(SELECT2_OPT);
};

// convert any array or value to datasource label
H.ValToFields = function (datasource, sel, sep) {
    if ("object" != typeof sel) return datasource[sel];
    var labels = [];
    for (var z in sel) labels.push(H.ValToFields(datasource, sel[z], sep));
    return labels.join(sep ? sep : " + ");
};

// join array
H.ArrToStr = function (arr, by) {
    if ("object" == typeof arr && arr.length) return arr.join(by);
    if (!arr) return "";
    return "";
};

H.ObjToStrWithKey = function (obj, by) {
    if ("object" == typeof obj && Object.keys(obj).length) {
        return Object.keys(obj)
            .map(function (k) {
                return "<b>" + k + ": " + SPANc("blue", obj[k]) + "</b>";
            })
            .join(by);
    }
    if (!obj) return "";
    return "";
};

// return empty string
H.Empty = function () {
    return "";
};

// map to kv, convert H.MapToKV({x:{bla:1},y:{bla:2}},"bla") to {x:1,y:2}
H.HashToKV = function (map, val_key) {
    var hash = {};
    for (var z in map) {
        hash[z] = map[z][val_key];
    }
    return hash;
};
H.HashToKV2 = function (map, val_key, val_key2) {
    var hash = {};
    for (var z in map) {
        var m = map[z];
        hash[z] = m[val_key] + " -- " + m[val_key2];
    }
    return hash;
};
//  to kv, convert H.HashToKV([{id:1,bla:1},{id:2,bla:3}],"id","bla") to {1:1,2:3}
H.MapsToKV = function (map, key_key, val_key) {
    var hash = {};
    for (var z in map) {
        var m = map[z];
        hash[m[key_key]] = m[val_key];
    }
    return hash;
};
// arr to object, convert values as keys boolean, [1,2,3] to {1:true,2:true,3:true}
H.ArrValuesToBoolMap = function (arr) {
    var res = {};
    if ("object" != typeof arr) {
        res[arr] = true;
        return res;
    }
    if (!arr || !arr.length) return {};
    for (var z = 0; z < arr.length; ++z) res[arr[z]] = true;
    return res;
};
// arr to object, convert values the same as key, [1,2,3] to {1:1,2:2,3:3}
H.ArrValuesToKV = function (arr) {
    var res = {};
    if ("object" != typeof arr) {
        res[arr] = arr;
        return res;
    }
    if (!arr || !arr.length) return {};
    for (var z = 0; z < arr.length; ++z) res[arr[z]] = arr[z];
    return res;
};
// convert anything to array, except when it's already an array
H.AnyToArr = function (arr) {
    if ("object" == typeof arr) return arr;
    var res = [];
    if (arr) res.push(arr);
    return res;
};
// object is equal
H.Equal = function (obj1, obj2) {
    return JSON.stringify(obj1) == JSON.stringify(obj2);
};
// key is enter
H.IsEnterKey = function (e) {
    if (!e) throw "parameter should be an event: " + e;
    return e.keyCode == 13 || e.which == 13 || e.keyIdentifier == "Enter";
};

// key is escape
H.isEscKey = function (e) {
    if (!e) throw "parameter should be an event: " + e;
    return e.keyCode == 27 || e.which == 27 || e.keyIdentifier == "Escape";
};

// key is down
H.isDownKey = function (e) {
    if (!e) throw "parameter should be an event: " + e;
    return e.keyCode == 40 || e.which == 40 || e.keyIdentifier == "Down";
};

// key is up
H.isUpKey = function (e) {
    if (!e) throw "parameter should be an event: " + e;
    return e.keyCode == 38 || e.which == 38 || e.keyIdentifier == "Up";
};

// key is left
H.isLeftKey = function (e) {
    if (!e) throw "parameter should be an event: " + e;
    return e.keyCode == 37 || e.which == 37 || e.keyIdentifier == "Left";
};

// key is right
H.isRightKey = function (e) {
    if (!e) throw "parameter should be an event: " + e;
    return e.keyCode == 39 || e.which == 39 || e.keyIdentifier == "Right";
};

// Uppercase the first character of each word in a string
H.Ucwords = function ucwords(str) {
    var string = str.toLowerCase();
    return (string + "").replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g, function ($1) {
        return $1.toUpperCase();
    });
};

// Checks if a value exists in an object/array
H.Contains = function (needle, haystack) {
    for (var key in haystack) if (haystack[key] == needle) return true;
    return false;
};
// find first index/key of needle in haystack
H.IndexOf = function (needle, haystack) {
    for (var key in haystack) if (haystack[key] == needle) return key;
    return null;
};

// return the string if it's not a number
H.NotNumStr = function (str) {
    if (str | 0) return "";
    return str;
};

// convert to integer
H.ToI = function (any) {
    var res = parseInt(any);
    if (isNaN(res)) return 0;
    return res;
};

// shift start date to [w]th-week + [wd]th day
H.WeekOfSemester = function (start_date, week, weekday) {
    var start_day = moment(start_date);
    if (start_day.weekday() > weekday) ++week; // if the semester start not in monday
    return start_day
        .startOf("week")
        .add(weekday + week * 7, "days")
        .format(Const_YMD);
};

// get string before certain substring
H.StringBefore = function (str, sep) {
    var idx = str.indexOf(sep);
    if (idx < 0) return str;
    return str.substring(0, idx);
};
// download text
H.DownloadText = function (filename, str) {
    if (window.navigator.msSaveOrOpenBlob) {
        var fileData = [str];
        var blobObject = new Blob(fileData);
        $(anchorSelector).click(function () {
            window.navigator.msSaveOrOpenBlob(blobObject, filename);
        });
    } else {
        var url = "data:text/plain;charset=utf-8," + encodeURIComponent(str);
        $(anchorSelector).attr("download", filename);
        $(anchorSelector).attr("href", url);
    }
};
// first element of, equal to _.find(arr, function(obj){ return obj.id == id } )
H.FirstElemOf = function (arr, prop, needle) {
    for (var z in arr) {
        var hash = arr[z];
        if (hash[prop] == needle) return arr[z];
    }
    return {};
};

H.HelpWindow = function (url, module) {
    var str = url;
    if (str.indexOf(".") > -1) {
        str = url.substr(url.indexOf(".") + 1);
    }

    if (str == "html" || str == "pdf") {
        url = "/help" + url;
        $("#myModal iframe").attr("src", url);
        $("#myModal").modal("show");
    }
    /*else {
     url = '/' + module + '/help' + url;
     H.OpenNewTab( url );
     }*/
};

H.LoadIframe = function (id, src) {
    var el = H.JQuerify(id);
    if (!el) return;
    if (!el.attr("src")) el.prop("src", src);
    el.load(function () {
        var lastHeight = el.contents().height();
        (function run() {
            var newHeight = el.contents().height();
            if (lastHeight != newHeight) el.height((lastHeight = newHeight));
            if (el.onElementHeightChangeTimer) clearTimeout(el.onElementHeightChangeTimer);
            el.onElementHeightChangeTimer = setTimeout(run, 333);
        })();
    });
};

H.RefreshIframe = function (id, src) {
    var el = H.JQuerify(id);
    if (el.attr("src")) el.prop("src", src);
};
// increment time
H.IncTime = function (time, minute) {
    if (!minute) return "";
    time += "";
    time = time.split(":");
    time = time[0] * 60 + +time[1];
    time += +minute;
    var mm = time % 60;
    if (mm < 10) mm = "0" + mm;
    var hh = Math.floor(time / 60);
    if (hh < 10) hh = "0" + hh;
    return hh + ":" + mm;
};

// captcha random confirm button
H.RandomConfirm = function (title, msg, callback) {
    var words = msg.split(" ");
    var max_rand = Math.min(10, words.length);
    var pos = "";
    var get_word = function () {
        pos = Math.floor(Math.random() * max_rand);
        return words[pos];
    };
    var word1 = get_word();
    do {
        var word2 = get_word();
    } while (word2 == word1);
    do {
        var word3 = get_word();
    } while (word3 == word1 || word3 == word2);
    pos += 1;
    var pos_ind = pos;
    switch (pos % 10) {
        case 1:
            pos += "st";
            break;
        case 2:
            pos += "nd";
            break;
        case 3:
            pos += "rd";
            break;
        default:
            pos += "th";
            break;
    }
    var err_msg =
        "INCORRECT choice !<br/><b>The " +
        pos +
        '</b> word is "<b>' +
        word3 +
        '</b>".<br/>Your ENROLLMENT is interrupted, please try again.';
    var buttons = [
        {
            label: word1,
            action: function (dialog) {
                H.GrowlError(err_msg);
                dialog.close();
            },
        },
        {
            label: word2,
            action: function (dialog) {
                H.GrowlError(err_msg);
                dialog.close();
            },
        },
        {
            label: word3,
            action: function (dialog) {
                callback();
                dialog.close();
            },
        },
    ].sort(function () {
        return Math.random() - 0.5;
    });
    BootstrapDialog.show({
        title: title,
        message:
            SPANc("big", msg) +
            HR() +
            "<b>INSTRUCTION</b>:<br/>" +
            "By choosing the <b>" +
            pos +
            "</b> word from paragraph above, I declare that I have read, understand, and agree with these terms and conditions.<br/>" +
            "<i>Dengan memilih kata ke-<b>" +
            pos_ind +
            "</b> dari paragraf di atas, saya menyatakan bahwa saya telah membaca dan menyetujui pernyataan tersebut.</i>" +
            '<br/><br/><b class="text-danger">Please choose the <b>' +
            pos +
            "</b> word below to proceed with your enrollment!</b>",
        buttons: buttons,
    });
};

H.SetModalIframeSrc = function (src, id) {
    let _id = "myModal";
    if (id) _id = id;

    $("#" + _id + " iframe").attr("src", src);
    $("#" + _id).modal("show");
};

H.SetIframeSrc = function (id, src) {
    $(id).attr("src", src);
};

H.NumberWithCommas = function (str) {
    return str.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

H.NumberWithDot = function (str) {
    return str.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
};

H.SmoothScroll = function (id) {
    $("html, body").animate(
        {
            scrollTop: $("#" + id).offset().top,
        },
        700
    );
};

// H.Autocomplete = function(id,a) {
// 	var minlength = 3;
// 	var el = H.JQuerify( id );
// 	el.keyup(function() {
// 		el.attr("value","");
// 		var value = $(this).val();
// 		var id = $(this).attr('id');
// 		var values = {
// 			a: a || 'autocomplete',
// 			keyword: value
// 		};
// 		var tags = [];
// 		if (value.length >= minlength ) {
// 			H.Post( values, function( res ) {
// 				if (H.HasAjaxErrors(res)) return;
// 				var result = res.result;
// 				for(var key in result){
// 					tags.push({
// 						id: key,
// 						label: result[key],
// 						value: result[key],
// 					})
// 				}
// 				el.autocomplete({
// 					source: tags,
// 					select: function(event, ui) {
// 						el.text(ui.item.label);
// 						el.attr("value", ui.item.id);
// 					}
// 				});
// 			});
// 		}

// 	});
// };

H.Autocomplete = function (id, a) {
    let minLength = 3;
    let el = H.JQuerify(id);
    el.autocomplete({
        minLength: minLength,
        source: function (request, response) {
            // el.attr("value","");
            // var value = $(this).val();
            // var id = $(this).attr('id');
            let values = {
                a: a || "autocomplete",
                keyword: request.term,
            };
            H.Post(values, function (res) {
                if (H.HasAjaxErrors(res)) return;
                let tags = [];
                let result = res.result;
                for (var key in result) {
                    tags.push({
                        id: key,
                        label: result[key],
                        value: result[key],
                    });
                }
                response(tags);
            });
        },
        select: function (event, ui) {
            el.text(ui.item.label);
            el.data("id", ui.item.id);
            el.data("value", ui.item.value);
        },
    });
};

H.AutocompleteCustom = function (id, a, params) {
    const minLength = 3;
    const el = H.JQuerify(id);
    el.autocomplete({
        minLength: minLength,
        source: function (request, response) {
            // el.attr("value","");
            // var value = $(this).val();
            // var id = $(this).attr('id');
            let values = {
                a: a || "autocomplete",
                keyword: request.term,
            };
            values = Object.assign(values, params);
            H.Post(values, function (res) {
                if (H.HasAjaxErrors(res)) return;
                let tags = [];
                let result = res.result;
                for (var key in result) {
                    tags.push({
                        id: key,
                        label: result[key],
                        value: result[key],
                    });
                }
                response(tags);
            });
        },
        select: function (event, ui) {
            el.text(ui.item.label);
            el.data("id", ui.item.id);
            el.data("value", ui.item.value);
        },
    });
};

H.PaymentMethodChange = function () {
    var bank_account_id = $("#bank_account_id");
    var cheque_open_date = $("#cheque_open_date");
    var cheque_receive_date = $("#cheque_receive_date");
    var cheque_disburse_date = $("#cheque_disburse_date");
    var cheque_number = $("#cheque_number");
    var cheque_name = $("#cheque_name");
    var transaction_date = $("#transaction_date");
    if ($("#payment_method").val() == "petty_cash") {
        bank_account_id.attr("disabled", true);
        cheque_open_date.attr("disabled", true);
        cheque_receive_date.attr("disabled", true);
        cheque_number.attr("disabled", true);
        cheque_name.attr("disabled", true);
        $("#select2-payment_bank_id-container").text(DS.BankAccounts["0"]);
    } else {
        bank_account_id.attr("disabled", false);
        cheque_open_date.attr("disabled", false);
        cheque_receive_date.attr("disabled", false);
        cheque_number.attr("disabled", false);
        cheque_name.attr("disabled", false);
    }
};
H.AddPayments = function (
    tender_type,
    request_id,
    disburse_type,
    bank_account_control_id,
    cash_book_control_id,
    adminaccess,
    paid_to
) {
    var byrequest = "false";
    if (request_id > 0) {
        byrequest = "true";
    }
    var control_id = bank_account_control_id;
    if (bank_account_control_id == 0) {
        control_id = cash_book_control_id;
    }
    var info = "" + "<br>";
    var html = "";
    var html_norequest = "";
    if (request_id == 0) {
        html_norequest += DTDD("Payment Type", SELECT("payment_type"));
    }
    html += DL(
        html_norequest +
        DTDD("Payment Method", SELECT("payment_method", 'onchange="H.PaymentMethodChange()"')) +
        DTDD("Note", INPUT("text", "note", "")) +
        DTDD("Bank Account", SELECT("bank_account_id")) +
        DTDD("Cheque Open Date", DATE("cheque_open_date", "", 'placeholder="dd-MMM-yyyy"')) +
        DTDD("Cheque No", INPUT("text", "cheque_number", "")) +
        DTDD("Cheque Name", INPUT("text", "cheque_name", paid_to)) +
        DTDD("(Cheque)Receive Date", DATE("cheque_receive_date", "", 'placeholder="dd-MMM-yyyy"')) +
        DTDD("Est Disburses Date", DATE("est_disburses_date", "", 'placeholder="dd-MMM-yyyy"')) +
        DTDD("Transaction Date", DATE("transaction_date", "", 'placeholder="dd-MMM-yyyy"'))
    );

    H.ShowConfirmDialog(
        "Add Payment",
        html + info,
        function () {
            H.Select2ify("#payment_type", DS.PaymentType, "AP").focus();
            if (tender_type == "cash") {
                H.Select2ify("#payment_method", DS.FinancePaymentType, "petty_cash").focus();
                H.PaymentMethodChange();
            } else {
                H.Select2ify("#bank_account_id", DS.BankAccounts, 1870).focus();
                H.Select2ify("#payment_method", DS.FinancePaymentType, "cheque").focus();
            }

            var cheque_open_date = $("#cheque_open_date");
            cheque_open_date.datepicker({
                format: "yyyy-mm-dd",
                todayBtn: true,
                minDate: "0001-01-01",
                autoclose: true,
            });
            var cheque_receive_date = $("#cheque_receive_date");
            cheque_receive_date.datepicker({
                format: "yyyy-mm-dd",
                todayBtn: true,
                minDate: "0001-01-01",
                autoclose: true,
            });
            var est_disburses_date = $("#est_disburses_date");
            est_disburses_date.datepicker({
                format: "yyyy-mm-dd",
                todayBtn: true,
                minDate: "0001-01-01",
                autoclose: true,
            });
            var transaction_date = $("#transaction_date");
            transaction_date.datepicker({
                format: "yyyy-mm-dd",
                todayBtn: true,
                minDate: "0001-01-01",
                autoclose: true,
            });
        },
        function (dialog) {
            var payment_type = $("#payment_type").val();
            if (request_id > 0) {
                payment_type = "AP";
            }
            var payment_method = $("#payment_method").val();
            var bank_account_id = $("#bank_account_id").val();
            var cheque_open_date = $("#cheque_open_date").val();
            var transaction_date = $("#transaction_date").val();
            var note = $("#note").val();
            var cheque_number = $("#cheque_number").val();
            var cheque_name = $("#cheque_name").val();
            var cheque_receive_date = $("#cheque_receive_date").val();
            var est_disburses_date = $("#est_disburses_date").val();
            // if (payment_method != 'petty_cash') {
            //     transaction_date = moment().format(Const_YMD);
            // }
            //var bank_account_control_id = parseInt(bank_account_control_id);
            dialog.close();
            var text = "Are you sure you want to <b>SAVE</b> this Payment ?<br/>";
            BootstrapDialog.confirm(text, function (ok) {
                if (!ok) return;
                var values = {
                    _url: "/finance/acct_payments/",
                    a: "save_payments",
                    payment_type: payment_type,
                    payment_method: payment_method,
                    bank_account_id: bank_account_id,
                    cheque_open_date: cheque_open_date,
                    transaction_date: transaction_date,
                    disburse_type: disburse_type,
                    payment_id: 0,
                    bank_account_control_id: bank_account_control_id,
                    cash_book_control_id: cash_book_control_id,
                    note: note,
                    cheque_number: cheque_number,
                    cheque_name: cheque_name,
                    cheque_receive_date: cheque_receive_date,
                    est_disburses_date: est_disburses_date,
                    request_id: request_id,
                };
                H.Post(values, function (res) {
                    if (H.HasAjaxErrors(res, "failed to save Payments")) return;
                    // if(adminaccess != 'true'){
                    //    window['ADVANCE_PAYMENTS'].Reload();
                    // }else{
                    //    window['PAYMENT_DETAILS'].Reload();
                    // }
                    window.open(
                        "/finance/acct_payment_details/" +
                        res.result +
                        "/" +
                        byrequest +
                        "/" +
                        adminaccess +
                        "/" +
                        control_id,
                        "_blank"
                    );
                });
            });
        }
    );
};

H.AddPaymentsNew = function (id, type, disburse_type) {
    var payment_type = "";
    var paid_to = "";
    var info = "";
    var tender_type = "";
    var request_id = 0;
    var invoice_id = 0;
    var payment_method = "";
    var cash_book_id = 0;
    var html = "";
    var bank_account_control_id = 0;
    if (type == "adis" || type == "lpum_different") {
        request_id = id;
        if (request_id > 0) {
            if (disburse_type == "BBK_R" || disburse_type == "BBK_PUM") {
                payment_type = "AP";
                tender_type = "bank";
                payment_method = "cheque";
                html += DL(
                    DTDD("Payment For Request Id", request_id) +
                    DTDD("Bank Account", SELECT("bank_account_id")) +
                    DTDD(
                        "Cheque Open Date",
                        DATE("cheque_open_date", "", 'placeholder="dd-MMM-yyyy"')
                    ) +
                    DTDD("Cheque No", INPUT("text", "cheque_number", "")) +
                    DTDD(
                        "(Cheque)Receive Date",
                        DATE("cheque_receive_date", "", 'placeholder="dd-MMM-yyyy"')
                    ) +
                    DTDD(
                        "Est Disburses Date",
                        DATE("est_disburses_date", "", 'placeholder="dd-MMM-yyyy"')
                    ) +
                    DTDD(
                        "Transaction Date",
                        DATE("transaction_date", "", 'placeholder="dd-MMM-yyyy"')
                    )
                );
            } else if (disburse_type == "BKK") {
                payment_type = "AP";
                tender_type = "cash";
                payment_method = "petty_cash";
                cash_book_id = 4588;
                html += DL(
                    DTDD("Payment For Request Id", request_id) +
                    DTDD("Note", INPUT("text", "note", "")) +
                    DTDD(
                        "Transaction Date",
                        DATE("transaction_date", "", 'placeholder="dd-MMM-yyyy"')
                    )
                );
            }
        }
    } else if (type == "bank_control") {
        bank_account_control_id = id;
        tender_type = "bank";
        payment_method = "cheque";
        html += DL(
            DTDD("Payment Type", SELECT("payment_type")) +
            DTDD("Note", INPUT("text", "note", "")) +
            DTDD("Bank Account", SELECT("bank_account_id")) +
            DTDD("Cheque Open Date", DATE("cheque_open_date", "", 'placeholder="dd-MMM-yyyy"')) +
            DTDD("Cheque No", INPUT("text", "cheque_number", "")) +
            DTDD("Cheque Name", INPUT("text", "cheque_name", paid_to)) +
            DTDD(
                "(Cheque)Receive Date",
                DATE("cheque_receive_date", "", 'placeholder="dd-MMM-yyyy"')
            ) +
            DTDD(
                "Est Disburses Date",
                DATE("est_disburses_date", "", 'placeholder="dd-MMM-yyyy"')
            ) +
            DTDD("Transaction Date", DATE("transaction_date", "", 'placeholder="dd-MMM-yyyy"'))
        );
    } else if (type == "invoice") {
        payment_type = "AR";
        invoice_id = id;
        tender_type = "bank";
        payment_method = "transfer";
        html += DL(
            DTDD("Payment For Request Id", invoice_id) +
            DTDD("Note", INPUT("text", "note", "")) +
            DTDD("Bank Account", SELECT("bank_account_id")) +
            DTDD("Transaction Date", DATE("transaction_date", "", 'placeholder="dd-MMM-yyyy"'))
        );
    } else if (type == "affiliate_request") {
        payment_type = "AP";
        invoice_id = id;
        tender_type = "bank";
        payment_method = "cheque";
        html += DL(
            DTDD("Payment For Request Id", invoice_id) +
            DTDD("Note", INPUT("text", "note", "")) +
            DTDD("Bank Account", SELECT("bank_account_id")) +
            DTDD("Cheque Open Date", DATE("cheque_open_date", "", 'placeholder="dd-MMM-yyyy"')) +
            DTDD("Cheque Name", INPUT("text", "cheque_name", "")) +
            DTDD("Cheque No", INPUT("text", "cheque_number", "")) +
            DTDD(
                "(Cheque)Receive Date",
                DATE("cheque_receive_date", "", 'placeholder="dd-MMM-yyyy"')
            ) +
            DTDD("Transaction Date", DATE("transaction_date", "", 'placeholder="dd-MMM-yyyy"'))
        );
    }

    H.ShowConfirmDialog(
        "Add Payment",
        html + info,
        function () {
            H.Select2ify("#payment_type", DS.PaymentType, "AP").focus();
            if (tender_type == "cash") {
                H.Select2ify("#payment_method", DS.FinancePaymentType, "petty_cash").focus();
                H.PaymentMethodChange();
            } else {
                H.Select2ify("#bank_account_id", DS.BankAccounts, 1870).focus();
                H.Select2ify("#payment_method", DS.FinancePaymentType, "cheque").focus();
            }

            var cheque_open_date = $("#cheque_open_date");
            cheque_open_date.datepicker({
                format: "yyyy-mm-dd",
                todayBtn: true,
                minDate: "0001-01-01",
                autoclose: true,
            });
            var cheque_receive_date = $("#cheque_receive_date");
            cheque_receive_date.datepicker({
                format: "yyyy-mm-dd",
                todayBtn: true,
                minDate: "0001-01-01",
                autoclose: true,
            });
            var est_disburses_date = $("#est_disburses_date");
            est_disburses_date.datepicker({
                format: "yyyy-mm-dd",
                todayBtn: true,
                minDate: "0001-01-01",
                autoclose: true,
            });
            var transaction_date = $("#transaction_date");
            transaction_date.datepicker({
                format: "yyyy-mm-dd",
                todayBtn: true,
                minDate: "0001-01-01",
                autoclose: true,
            });
        },
        function (dialog) {
            var bank_account_id = $("#bank_account_id").val();
            if (tender_type == "") {
                tender_type = $("#tender_type").val();
            }
            if (payment_type == "") {
                payment_type = $("#payment_type").val();
            }
            if (payment_method == "") {
                payment_method = $("#payment_method").val();
            }
            if (tender_type == "cash") {
                payment_method = "petty_cash";
                cash_book_id = 4588;
            }
            var cheque_open_date = $("#cheque_open_date").val();
            var transaction_date = $("#transaction_date").val();
            var note = $("#note").val();
            var cheque_number = $("#cheque_number").val();
            var cheque_name = $("#cheque_name").val();
            var cheque_receive_date = $("#cheque_receive_date").val();
            var est_disburses_date = $("#est_disburses_date").val();
            dialog.close();
            var text = "Are you sure you want to <b>SAVE</b> this Payment ?<br/>";
            BootstrapDialog.confirm(text, function (ok) {
                if (!ok) return;
                var values = {
                    _url: "/finance/acct_payments/",
                    a: "save_payments",
                    payment_type: payment_type,
                    tender_type: tender_type,
                    payment_method: payment_method,
                    bank_account_id: bank_account_id,
                    cash_book_id: cash_book_id,
                    cheque_open_date: cheque_open_date,
                    transaction_date: transaction_date,
                    disburse_type: disburse_type,
                    note: note,
                    cheque_number: cheque_number,
                    cheque_name: cheque_name,
                    cheque_receive_date: cheque_receive_date,
                    est_disburses_date: est_disburses_date,
                    request_id: request_id,
                    invoice_id: invoice_id,
                    type: type,
                    bank_account_control_id: bank_account_control_id,
                };
                H.Post(values, function (res) {
                    if (H.HasAjaxErrors(res, "failed to save Payments")) return;
                    window.open("/finance/acct_payment_details/" + res.result, "_blank");
                });
            });
        }
    );
};

H.RenderToggle = function (id) {
    var elem = $("#" + id);
    var html = elem.html();
    var show = true;

    if (html != "") {
        show = false;
        html = "";
    }
    elem.html(html);
    return show;
};
H.ValidationScore = function (el) {
    var self = $(el);
    // var min = parseFloat(self.attr("min")) || 0;
    var max = parseFloat(self.attr("max")) || 0;

    var value = parseFloat(self.val());
    // self.val(value); // make sure we got an int
    // if (value < min) self.val(min);
    if (value > max) self.val(max);
};
H.GetTimeBlockStr = function (row, time_block_id) {
    if (row.start_date) {
        var d = moment(row.start_date);
        return d.format("ddd HH:mm");
    }
    const program_session = row.program_session;
    const semester = row.semester;
    const major_id = row.major_id; // 9748
    let duration = 50;
    if (semester >= 20232) {
        duration = major_id === 9748 ? 60 : program_session === "M" ? 45 : 40;
    }
    var t1 = TimePref.block_str(time_block_id, +row.sks === 0 ? +row.fee_sks : +row.sks, duration);
    return t1;
};

H.HideFields = function (_form, fields) {
    if (typeof fields == "object") {
        for (var z in fields) {
            var field = fields[z];
            var el = $(
                "#" + _form + ' div.form-group:has(div:has(label[for="' + _form + "___" + field + '"]))'
            );
            el.hide();
        }
    } else if (typeof fields == "string") {
        var el = $("#" + _form + ' div.form-group:has(div:has(label[for="' + _form + "___" + fields + '"]))');
        el.hide();
    }
};

H.ShowFields = function (_form, fields) {
    if (typeof fields == "object") {
        for (var z in fields) {
            var field = fields[z];
            var el = $(
                "#" + _form + ' div.form-group:has(div:has(label[for="' + _form + "___" + field + '"]))'
            );
            el.show();
        }
    } else if (typeof fields == "string") {
        var el = $("#" + _form + ' div.form-group:has(div:has(label[for="' + _form + "___" + fields + '"]))');
        el.show();
    }
};

H.HideShowFields = function (_form, hide_fields, show_fields) {
    H.HideFields(_form, hide_fields);
    H.ShowFields(_form, show_fields);
};

H.SortObjectByVal = function (obj, val, isNumericSort) {
    isNumericSort = isNumericSort || false; // by default text sort
    var sortable = [];
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            sortable.push([key, obj[key]]);
        }
    }
    if (isNumericSort) {
        sortable.sort(function (a, b) {
            return a[1] - b[1];
        });
    } else {
        sortable.sort(function (a, b) {
            var x = a[1][val].toLowerCase(),
                y = b[1][val].toLowerCase();
            return x < y ? -1 : x > y ? 1 : 0;
        });
    }

    var new_obj = {};
    for (var z in sortable) {
        var row = sortable[z];
        new_obj[z] = row[1];
    }
    return new_obj; // array in format [ [ key1, val1 ], [ key2, val2 ], ... ]
};

H.UnsetAutoComplete = function (id, is_txtbox) {
    var el = $("." + id + ", #" + id);
    if (!is_txtbox) return el.val("");
    var val = $("#" + id).val();
    if (val.length == 0) {
        return el.val("");
    }
};

H.jsPDFfromHTML = function (id, source) {
    var pdf = new jsPDF("p", "pt", "letter"),
        // source can be HTML-formatted string, or a reference
        // to an actual DOM element from which the text will be scraped.
        source = $("#" + id)[0],
        // we support special element handlers. Register them with jQuery-style
        // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
        // There is no support for any other type of selectors
        // (class, of compound) at this time.
        specialElementHandlers = {
            // element with id of "bypass" - jQuery style selector
            "#bypassme": function (element, renderer) {
                // true = "handled elsewhere, bypass text extraction"
                return true;
            },
        };
    pdf.setProperties({
        title: "This is My Title",
    });
    margins = {
        top: 80,
        bottom: 60,
        left: 40,
        width: 522,
    };
    // all coords and widths are in jsPDF instance's declared units
    // 'inches' in this case
    pdf.fromHTML(
        source, // HTML string or DOM elem ref.
        margins.left, // x coord
        margins.top, // y coord
        {
            width: margins.width, // max width of content on PDF
            elementHandlers: specialElementHandlers,
        },
        function (dispose) {
            // dispose: object with X, Y of the last line add to the PDF
            //          this allow the insertion of new lines after html
            pdf.save("Test.pdf");
        },
        margins
    );
};

H.headerFooterFormatting = function (doc, totalPages) {
    for (var i = totalPages; i >= 1; i--) {
        doc.setPage(i);
        //header
        H.header(doc);

        H.footer(doc, i, totalPages);
        doc.page++;
    }
};

var base64Img = null;
H.header = function (doc) {
    doc.setFontSize(30);
    doc.setTextColor(40);
    doc.setFontStyle("normal");

    if (base64Img) {
        doc.addImage(base64Img, "JPEG", margins.left, 10, 40, 40);
    }

    doc.text("Report Header Template", margins.left + 50, 40);
    doc.setLineCap(2);
    doc.line(3, 70, margins.width + 43, 70); // horizontal line
};

// You could either use a function similar to this or pre convert an image with for example http://dopiaza.org/tools/datauri
// http://stackoverflow.com/questions/6150289/how-to-convert-image-into-base64-string-using-javascript
H.imgToBase64 = function (url, callback, imgVariable) {
    if (!window.FileReader) {
        callback(null);
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.responseType = "blob";
    xhr.onload = function () {
        var reader = new FileReader();
        reader.onloadend = function () {
            imgVariable = reader.result.replace("text/xml", "image/jpeg");
            callback(imgVariable);
        };
        reader.readAsDataURL(xhr.response);
    };
    xhr.open("GET", url);
    xhr.send();
};

H.footer = function (doc, pageNumber, totalPages) {
    var str = "Page " + pageNumber + " of " + totalPages;

    doc.setFontSize(10);
    doc.text(str, margins.left, doc.internal.pageSize.height - 20);
};

/**
 *  Check date format
 *  @param str
 * @returns {*|boolean}
 */
H.IsValidDate = function (str) {
    return moment(str, "YYYY-MM-DD").isValid();
};

/**
 * Check valid time
 * @param String
 * @return {Boolean}
 */
H.IsValidTime = function (v) {
    v = "" + v;
    var regExp = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]$/;
    return regExp.test(v);
};

H.CheckFormatDate = function (str, layout, field) {
    if (!(moment(str, layout).format(layout) === str)) {
        H.ShowErrorDialog(
            "Error " + field + " Date",
            "Format on " + field + " Date must <b>" + layout + "</b>"
        );
        return false;
    }
    return true;
};

H.RemoveToggleMenu = function (el) {
    if (!el) {
        $(document).ready(function () {
            $("#togglemenu1").remove();
            $(".iframe-hidden").remove();
            $("#wrapper-footer").remove();
            $("div.container-fluid.hidden-print").remove();
        });
    } else {
        var id = el.id;
        var elem = $("#" + id);
        elem.contents().find("#togglemenu1").remove();
        elem.contents().find(".iframe-hidden").remove();
        elem.contents().find("#wrapper-footer").remove();
        elem.contents().find("div.container-fluid.hidden-print").remove();
    }
};

/**
 *  Get the Min Date From Array Dates
 *  @param Array
 * @returns String
 */
H.MinDate = function (dates) {
    var sorted = dates.sort(function (a, b) {
        a = new Date(a);
        b = new Date(b);
        return a.getTime() - b.getTime();
    });
    return sorted[0];
};

/**
 *  Get the Max Date From Array Dates
 *  @param Array
 * @returns String
 */
H.MaxDate = function (dates) {
    var sorted = dates.sort(function (a, b) {
        a = new Date(a);
        b = new Date(b);
        return a.getTime() - b.getTime();
    });
    return sorted[sorted.length - 1];
};

/**
 * Check if param is Undefined
 * @return {Boolean}
 */
H.IsUndefined = function (v) {
    return v === undefined || v === null;
};

/**
 * Check if param is Defined
 * @return {Boolean}
 */
H.IsDefined = function (v) {
    return v !== undefined && v !== null && v !== "";
};

/**
 * Check if param is Empty: undefined, null, [], "", 0
 * @return {Boolean}
 */
H.IsEmpty = function (v) {
    return v == null || v.length === 0;
};

/**
 * Check if param is Empty: undefined, null, [], ""
 * 0 (Zero) is not considered empty
 * @return {Boolean}
 */
H.IsEmpty2 = function (v) {
    // Check if value is null, undefined, or an empty string
    if (v === null || v === undefined || v === "") {
        return false;
    }

    // If value is 0, return true (considered not empty)
    if (v === 0) {
        return true;
    }

    // For any other non-empty value, return true
    return true;
};

/**
 * Show/Hide Loading
 */
H.Loading = function (isTrue) {
    const el = $("body");
    isTrue ? el.addClass("loading") : el.removeClass("loading");
    return isTrue;
};

H.ExecWithLoader = function (a_sync_func, autocloseloader = true) {
    H.Loading(true);
    window.setTimeout(function () {
        a_sync_func();
        if (autocloseloader) H.Loading(false);
    }, 100);
};
// close/hide loader must be made inside the async function
H.ExecAsyncWithLoader = function (an_async_func) {
    H.ExecWithLoader(an_async_func, false);
};

/**
 * Check if Val is True
 * @return {Boolean}
 */
H.IsTrue = function (v) {
    return v === true || v === "true";
};

/**
 * Check if Val is False
 * @return {Boolean}
 */
H.IsFalse = function (v) {
    return v === false || v === "false";
};

H.OrdinalSuffixOf = function (i) {
    var j = i % 10,
        k = i % 100;
    if (j == 1 && k != 11) {
        return i + "st";
    }
    if (j == 2 && k != 12) {
        return i + "nd";
    }
    if (j == 3 && k != 13) {
        return i + "rd";
    }
    return i + "th";
};

H.Terbilang = function (feed) {
    //mendefinisikan satuan
    var units = [
        "",
        "ribu ",
        "juta",
        "milyar",
        "triliun",
        "kuadriliun",
        "kuantiliun",
        "sekstiliun",
        "septiliun",
        "oktiliun",
        "noniliun",
        "desiliun",
    ];
    //Mendefinisikan bilangan
    var angka = ["", "satu", "dua", "tiga", "empat", "lima", "enam", "tujuh", "delapan", "sembilan"];
    //membuat function untuk memecah bilangan menjadi array beranggota 3 digit

    var number = H.Currency(feed.toString()).split(",");

    //menginisiasi luaran
    var output = "";

    var segment3 = number[0].split(".");
    //Membilang setiap segmen 3 digit
    $.each(segment3, function (i, v) {
        if (v * 1 != 0) {
            //memecah 3 digit menjadi arrau 1 digit
            if (v.length < 3) {
                v = ("00" + v).substr(-3, 3);
            }
            var digit = v.split("");

            //menentukan nilai ratusan
            output += digit[0] == "1" ? "seratus" : digit[0] != "0" ? angka[digit[0]] + " ratus " : "";

            //menentukan nilai puluhan
            if (digit[1] == "1") {
                output +=
                    digit[2] == "0"
                        ? " sepuluh "
                        : (digit[2] == "1" ? " se" : angka[digit[2]]) + "belas ";
            } else if (digit[1] != "0") {
                output += angka[digit[1]] + " puluh " + angka[digit[2]] + " ";
            } else {
                if (digit[0] == "0" && digit[1] == "0" && digit[2] == "1") {
                    output += i == segment3.length - 2 ? "se" : "satu ";
                } else {
                    output += angka[digit[2]] + " ";
                }
            }
            output += units[segment3.length - i - 1] + " ";
        }
    });

    var decimal = "";
    if (typeof number[1] != "undefined") {
        decimal = " koma ";
        angka[0] = " nol";
        $.each(number[1].split(""), function (i, v) {
            decimal += " " + angka[v];
        });
    }

    return output.toUpperCase() + decimal.toUpperCase() + " RUPIAH";
};

H.Currency = function (feed, number) {
    if (typeof number != "undefined" && !isNaN(number)) {
        feed = (Math.round((feed * 10) ^ -number) * 10) ^ number;
    }

    var segment = feed.split(".");

    while (/(\d+)(\d{3})/.test(segment[0])) {
        segment[0] = segment[0].replace(/(\d+)(\d{3})/, "$1" + "." + "$2");
    }

    return segment[0] + (typeof segment[1] != "undefined" ? "," + segment[1] : "");
};

/**
 * Check if it is an empty object
 * @return {Boolean}
 */
H.IsEmptyObject = function (obj) {
    if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
    } else {
        var k;
        for (k in obj) {
            if (obj.hasOwnProperty(k)) {
                return false;
            }
        }
        return true;
    }
};

/**
 * Just quote any attribute (for numbers or trusted text)
 * @param String
 * @return {String}
 */
H.Q = H.Q1 = function (v) {
    return "'" + v + "'";
};
H.Q2 = function (v) {
    return '"' + v + '"';
};

/**
 * Get String from the Left
 * @param String
 * @param Number
 * @return {String}
 */
H.TakeLeft = function (str, n) {
    if (n <= 0) return "";
    else if (n > String(str).length) return str;
    else return String(str).substring(0, n);
};

/**
 * Get String from the Right
 * @param String
 * @param Number
 * @return {String}
 */
H.TakeRight = function (str, n) {
    if (n <= 0) return "";
    else if (n > String(str).length) return str;
    else {
        var iLen = String(str).length;
        return String(str).substring(iLen, iLen - n);
    }
};

/**
 * Replace all string
 */
H.Replace = function (str, from, to) {
    return str.replace(new RegExp(from, "g"), to);
};

H.Z = function (str) {
    var str = H.Replace(str, "'", "&apos;");
    str = H.Replace(str, "`", "&#039;");
    str = H.Replace(str, '"', "&quot;");
    str = H.Replace(str, "&", "&amp;");
    str = H.Replace(str, ">", "&gt;");
    str = H.Replace(str, "<", "&lt;");
    str = H.Replace(str, "/n", "\n");
    return str;
};

// reverse from Z func
H.RZ = function (str) {
    var str = H.Replace(str, "&apos;", "'");
    str = H.Replace(str, "&#039;", "`");
    str = H.Replace(str, "&quot;", '"');
    str = H.Replace(str, "&amp;", "&");
    str = H.Replace(str, "&gt;", ">");
    str = H.Replace(str, "&lt;", "<");
    str = H.Replace(str, "\n", "/n");
    return str;
};

/**
 *  Get Range of 2 dates
 * @returns Array
 * @param start
 * @param end
 */
H.RangeOfDates = function (start, end) {
    const dateArray = [];
    let currentDate = moment(start);
    const stopDate = moment(end);
    while (currentDate <= stopDate) {
        dateArray.push(moment(currentDate).format("YYYY-MM-DD"));
        currentDate = moment(currentDate).add(1, "days");
    }
    return dateArray;
};

H.WeekCount = function (start_date, end_date) {
    let weeks = {},
        no = 0;
    let move = moment(start_date).startOf("week");
    while (true) {
        const move_str = move.format(Const_YMD);
        if (move_str >= end_date) break;
        weeks[++no] = {
            id: no,
            start_date: move_str + " 00:00",
            end_date: move.add(6, "days").format(Const_YMD) + " 23:59",
        };
        move = move.add(1, "day");
    }
    return Object.keys(weeks).length;
};

H.String = H.String || {};
// clean text from unicode or entities for further usage
H.String.Clean = function (txt) {
    return $("<span>" + txt + "</span>").text();
};

H.Clipboard = H.Clipboard || {};
// copy text to clipboard
H.Clipboard.Copy = function (data, show_info = true) {
    // clipboard only for localhost/prod.
    if (!navigator || !navigator.clipboard) return;
    navigator.clipboard.writeText(data);
    if (!show_info) return;
    H.GrowlInfo("Copy success!");
};

/**
 * Simple Local Storage helpers
 */
H.SetToLocal = function (k, v) {
    localStorage.setItem(k, v);
};

H.GetFromLocal = function (k) {
    return localStorage.getItem(k);
};

H.RemoveFromLocal = function (k) {
    localStorage.removeItem(k);
};

/**
 * Local Storage Utility
 */
H.LocalStorage = H.LocalStorage || {};
// store an item/replace existing item to a LocalStorage 'ls_name'
// The LocalStorage ls_name always stored as an LocalStorage Item, where the value containing a map data (key-value)
// LS = {id=>ls_name,  value=>items: {item_key: value, item_key2: value2, ...}
H.LocalStorage.Store = function (ls_name, item_key, item_val) {
    let data = H.LocalStorage.Get(ls_name);
    data[item_key] = item_val;
    localStorage.setItem(ls_name, JSON.stringify(data));
};
// clear a local storage
H.LocalStorage.Remove = function (ls_name) {
    localStorage.removeItem(ls_name);
};
// clear a local storage item identified by item's key
H.LocalStorage.RemoveItem = function (ls_name, item_key) {
    let data = H.LocalStorage.Get(ls_name);
    delete data[item_key];
    localStorage.setItem(ls_name, JSON.stringify(data));
};
// get local storage data
H.LocalStorage.Get = function (ls_name) {
    let data = localStorage.getItem(ls_name);
    return data ? JSON.parse(data) : {};
};
// clear a local storage item identified by item's key
H.LocalStorage.GetItem = function (ls_name, item_key) {
    let data = H.LocalStorage.Get(ls_name);
    return data[item_key];
};
// return true if localStorage exist
H.LocalStorage.IsExist = function (ls_name) {
    return localStorage.getItem(ls_name) != null;
};
// return true if localStorage exist
H.LocalStorage.IsItemExist = function (ls_name, item_key) {
    return H.LocalStorage.GetItem(ls_name, item_key) != null;
};

/**
 * Screen Utility
 */
H.Screen = H.Screen || {};
H.Screen.Width = function () {
    return $(window).width();
};
H.Screen.ProportionalWidth = function (percentage, max_width) {
    let w = Math.floor((H.Screen.Width() * 70) / 100);
    if (!max_width) return w;
    return w > max_width ? max_width : w;
};
H.Screen.HasMaxWidth = function (w) {
    return H.Screen.Width <= w;
};
H.Screen.HasMaxWidth480 = function () {
    return H.Screen.HasMaxWidth(480);
};
H.Screen.HasMaxWidth600 = function () {
    return H.Screen.HasMaxWidth(600);
};
H.Screen.HasMaxWidth768 = function () {
    return H.Screen.HasMaxWidth(768);
};
H.Screen.IsSmall = function () {
    return H.Screen.HasMaxWidth768();
};

/**
 * OLD DIALOG UTILITY
 */
// create simple cancel-save dialog
H.ShowConfirmDialog2 = function (title, message, onshown, onsave, size) {
    var sz = BootstrapDialog.SIZE_SMALL;
    if (size == "small") sz = BootstrapDialog.SIZE_SMALL;
    if (size == "wide") sz = BootstrapDialog.SIZE_WIDE;
    var buttons = [];
    buttons.push({
        // cancel button
        icon: "glyphicon glyphicon-arrow-left",
        label: "Cancel",
        cssClass: "btn-info pull-left",
        action: function (dialog) {
            H.Trace(arguments);
            dialog.close();
        },
    });

    buttons.push({
        // confirm button
        label: "Confirm",
        cssClass: "pull-right btn-primary ok",
        icon: "glyphicon glyphicon-floppy-disk",
        action: function (dialog) {
            H.Trace(arguments);
            dialog.enableButtons(false);
            dialog.setClosable(false);
            onsave(dialog);
        },
    });
    var options = {
        draggable: true,
        animate: false,
        closeByKeyboard: false,
        title: title,
        message: message,
        buttons: buttons,
        onshown: onshown,
        size: sz,
    };
    BootstrapDialog.show(options);
};
H.ShowConfirmDialog = function (title, message, onshown, onsave, size, onreset) {
    var sz = BootstrapDialog.SIZE_SMALL;
    if (size == "small") sz = BootstrapDialog.SIZE_SMALL;
    if (size == "wide") sz = BootstrapDialog.SIZE_WIDE;
    var buttons = [];
    buttons.push({
        // cancel button
        icon: "glyphicon glyphicon-arrow-left",
        label: "Cancel",
        cssClass: "btn-info pull-left",
        action: function (dialog) {
            H.Trace(arguments);
            dialog.close();
        },
    });
    if (onreset) {
        buttons.push({
            // reset button
            icon: "glyphicon glyphicon-refresh",
            label: "Reset",
            cssClass: "btn-inverse",
            action: function (dialog) {
                H.Trace(arguments);
                onreset(dialog);
            },
        });
    }

    buttons.push({
        // confirm button
        label: "Confirm",
        cssClass: "pull-right btn-primary ok",
        icon: "glyphicon glyphicon-floppy-disk",
        action: function (dialog) {
            H.Trace(arguments);
            dialog.enableButtons(false);
            dialog.setClosable(false);
            onsave(dialog);
        },
    });
    var options = {
        draggable: true,
        animate: false,
        closeByKeyboard: false,
        title: title,
        message: message,
        buttons: buttons,
        onshown: onshown,
        size: sz,
    };
    BootstrapDialog.show(options);
};
// create simple error dialog
H.ShowErrorDialog = function (title, message, onsave, size) {
    var sz = BootstrapDialog.SIZE_SMALL;
    if (size == "small") sz = BootstrapDialog.SIZE_SMALL;
    if (size == "wide") sz = BootstrapDialog.SIZE_WIDE;
    var buttons = [];
    buttons.push({
        // ok button
        label: "Ok",
        //cssClass: 'pull-right btn-primary ok',
        //icon: 'glyphicon glyphicon-send',
        action: function (dialog) {
            if (typeof onsave == "function") {
                onsave(this);
            }
            dialog.close();
        },
    });
    var options = {
        draggable: true,
        animate: false,
        closeByKeyboard: false,
        title: title,
        message: message,
        buttons: buttons,
        size: sz,
        type: BootstrapDialog.TYPE_WARNING,
        onhide: function () {
        },
    };
    BootstrapDialog.show(options);
};
// create simple info dialog
H.ShowInfoDialog = function (title, message, onsave, size) {
    var sz = BootstrapDialog.SIZE_SMALL;
    if (size == "small") sz = BootstrapDialog.SIZE_SMALL;
    if (size == "wide") sz = BootstrapDialog.SIZE_WIDE;
    var options = {
        draggable: true,
        animate: false,
        closeByKeyboard: true,
        title: title,
        message: message,
        size: sz,
        type: BootstrapDialog.TYPE_WARNING,
    };
    BootstrapDialog.show(options);
};
// ShowInfoDialog with button
H.ShowInfoDialog2 = function (title, message, onsave, size, type) {
    var t = BootstrapDialog.TYPE_INFO;
    if (type) t = type;
    var sz = BootstrapDialog.SIZE_SMALL;
    if (size == "small") sz = BootstrapDialog.SIZE_SMALL;
    if (size == "wide") sz = BootstrapDialog.SIZE_WIDE;
    var buttons = [];
    buttons.push({
        // ok button
        label: "&nbsp; Ok",
        cssClass: "pull-right btn-primary ok",
        icon: "glyphicon glyphicon-send",
        action: function (dialog) {
            if (typeof onsave == "function") {
                onsave(this);
            }
            dialog.close();
        },
    });
    var options = {
        draggable: true,
        animate: false,
        closeByKeyboard: true,
        title: title,
        message: message,
        buttons: buttons,
        size: sz,
        type: t,
        onhide: function () {
        },
    };
    BootstrapDialog.show(options);
};
// ShowInfoDialog with button and other options
H.ShowOkDialog = function (title, message, on_ok, opts) {
    var buttons = [];
    buttons.push({
        // ok button
        label: "&nbsp; Ok",
        cssClass: "pull-right btn-primary ok",
        icon: "glyphicon glyphicon-send",
        action: function (dialog) {
            if (typeof on_ok == "function") {
                on_ok(this);
            }
            dialog.close();
        },
    });
    var _opt = $.extend(
        {
            draggable: true,
            animate: false,
            closeByKeyboard: true,
            title: title,
            message: message,
            buttons: buttons,
            size: BootstrapDialog.SIZE_SMALL,
            type: BootstrapDialog.TYPE_INFO,
            onhide: function () {
            },
        },
        opts
    );
    BootstrapDialog.show(_opt);
};

/**
 * NEW DIALOG UTILITY
 */
H.Dialog = H.Dialog || {};
H.Dialog.Buttons = H.Dialog.Buttons || {};
H.Dialog.Buttons.DefaultAction = function (dialog) {
    dialog.close();
};
H.Dialog.Buttons.OK = {
    icon: "glyphicon glyphicon-ok-sign",
    label: "Ok",
    cssClass: "btn-info",
    action: H.Dialog.Buttons.DefaultAction,
};
H.Dialog.Buttons.Close = {
    icon: "glyphicon glyphicon-share-alt",
    label: "Close",
    cssClass: "btn-info",
    action: H.Dialog.Buttons.DefaultAction,
};
H.Dialog.Buttons.CloseWarning = {
    icon: "glyphicon glyphicon-share-alt",
    label: "Close",
    cssClass: "btn-warning",
    action: H.Dialog.Buttons.DefaultAction,
};
H.Dialog.Buttons.CloseError = {
    icon: "glyphicon glyphicon-share-alt",
    label: "Close",
    cssClass: "btn-error",
    action: H.Dialog.Buttons.DefaultAction,
};
H.Dialog.Buttons.Confirm = {
    label: "Confirm",
    cssClass: "btn-primary ok",
    icon: "glyphicon glyphicon-floppy-disk",
    action: H.Dialog.Buttons.DefaultAction,
};
H.Dialog.Buttons.CancelConfirm = {
    icon: "glyphicon glyphicon-arrow-left",
    label: "Cancel",
    cssClass: "btn-info pull-left",
    action: H.Dialog.Buttons.DefaultAction,
};

H.Dialog.ShowBase = function (title, content, type, size, buttons, onshown) {
    BootstrapDialog.show({
        draggable: true,
        animate: false,
        closeByKeyboard: false,
        title: title,
        message: content,
        buttons: buttons,
        onshown: onshown,
        type: type || BootstrapDialog.TYPE_PRIMARY,
        size: size || BootstrapDialog.SIZE_SMALL,
    });
};
H.Dialog.Show = function (title, content, onshown, type, size, buttons) {
    H.Dialog.ShowBase(title, content, type, size, buttons, onshown);
};
H.Dialog.ShowInfo = function (title, body, onshown, onok) {
    let buttons = [H.Dialog.Buttons.Close];
    if (typeof onok == "function") {
        buttons[0].action = function (dialog) {
            onok(this);
            dialog.close();
        };
    }
    H.Dialog.ShowBase(
        title || "Info",
        body,
        BootstrapDialog.TYPE_INFO,
        BootstrapDialog.SIZE_SMALL,
        buttons,
        onshown
    );
};
H.Dialog.ShowWarning = function (title, body, onshown, onok) {
    let buttons = [H.Dialog.Buttons.CloseWarning];
    if (typeof onok == "function") {
        buttons[0].action = function (dialog) {
            onok(this);
            dialog.close();
        };
    }
    H.Dialog.ShowBase(
        title || "Warning",
        body,
        BootstrapDialog.TYPE_WARNING,
        BootstrapDialog.SIZE_SMALL,
        buttons,
        onshown
    );
};
H.Dialog.ShowError = function (title, body, onshown, onok) {
    let buttons = [H.Dialog.Buttons.CloseError];
    if (typeof onok == "function") {
        buttons[0].action = function (dialog) {
            onok(this);
            dialog.close();
        };
    }
    H.Dialog.ShowBase(
        title || "Error",
        body,
        BootstrapDialog.TYPE_DANGER,
        BootstrapDialog.SIZE_SMALL,
        buttons,
        onshown
    );
};
H.Dialog.ShowConfirm = function (title, body, onshown, onsave, oncancel, confirmlabel) {
    let buttons = [H.Dialog.Buttons.Confirm, H.Dialog.Buttons.CancelConfirm];
    // custom button confirm
    if (confirmlabel) {
        buttons[0].label = confirmlabel;
    }
    if (typeof onsave == "function") {
        buttons[0].action = function (dialog) {
            onsave(dialog);
            dialog.close();
        };
    }
    // custom button cancel
    if (typeof oncancel == "function") {
        buttons[1].action = function (dialog) {
            oncancel(dialog);
            dialog.close();
        };
    }
    H.Dialog.ShowBase(
        title || "Confirmation",
        body,
        BootstrapDialog.TYPE_PRIMARY,
        BootstrapDialog.SIZE_SMALL,
        buttons,
        onshown
    );
};

H.IsValidJSON = function (str) {
    if (typeof str !== "string") return false;
    try {
        const j = JSON.parse(str);
        return typeof j === "object";
    } catch (error) {
        return false;
    }
};

/* Galang 2024-05-28
    parse MM-YYYY to month year (Ex: Mar 2024)
 */
H.YearMonthToReadable = (yearMonth) => {
    if (yearMonth == "" || !H.IsDefined(yearMonth)) {
        return "";
    }
    var parts = yearMonth.split("-");
    var year = parseInt(parts[0]);
    var month = parseInt(parts[1]);

    // Array of month names
    var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    var readableMonth = monthNames[month - 1]; // Month names are zero-indexed

    return readableMonth + " " + year;
};

/**
 * HTML ENTITIES/Symbol Utility
 */
H.Symbols = H.Symbols || {};
H.Symbols.Check = "&#10004";
H.Symbols.Remove = "&#10005";

H.IsHTML = (str) => {
    // Buat elemen HTML sementara untuk mencoba parsing string
    const tempElement = document.createElement("div");
    tempElement.innerHTML = str;
    // Jika setelah parsing, elemen memiliki childNodes, berarti itu adalah HTML
    return tempElement.childNodes.length > 0;
};

H.IND_MONTH = (mm) => {
    const months = {
        '01': 'Januari',
        '02': 'Februari',
        '03': 'Maret',
        '04': 'April',
        '05': 'Mei',
        '06': 'Juni',
        '07': 'Juli',
        '08': 'Agustus',
        '09': 'September',
        '10': 'Oktober',
        '11': 'November',
        '12': 'Desember'
    }
    return months[mm]
}

function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    // Avoid scrolling to bottom
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
        const successful = document.execCommand('copy');
        if (successful) H.GrowlInfo("Successfully copy url");
        const msg = successful ? 'successful' : 'unsuccessful';
        console.log('Fallback: Copying text command was ' + msg);
    } catch (err) {
        console.error('Fallback: Oops, unable to copy', err);
    }
    document.body.removeChild(textArea);
}

H.CopyTextToClipboard = function (text) {
    if (!navigator.clipboard) {
        fallbackCopyTextToClipboard(text);
        return;
    }
    navigator.clipboard.writeText(text).then(function () {
        console.log('Async: Copying to clipboard was successful!');
        H.GrowlInfo('Successfully Copy Content To Your Clipboard!');
    }, function (err) {
        console.error('Async: Could not copy text: ', err);
        H.GrowlError("failed to copy link!")
    });
}

H.TimeDiff = function (start_time, end_time) {
    const start = start_time.split(":");
    const end = end_time.split(":");
    const startDate = new Date(0, 0, 0, start[0], start[1], 0);
    const endDate = new Date(0, 0, 0, end[0], end[1], 0);
    let diff = endDate.getTime() - startDate.getTime();
    let hours = Math.floor(diff / 1000 / 60 / 60);
    diff -= hours * 1000 * 60 * 60;
    const minutes = Math.floor(diff / 1000 / 60);
    if (hours < 0) hours = hours + 24;
    return (hours <= 9 ? "0" : "") + hours + ":" + (minutes <= 9 ? "0" : "") + minutes;
}

H.CopyEmailsToClipboard = function (el) {
    let _emails = document.getElementById(el);
    let ok = false;
    _emails.select()
    _emails.setSelectionRange(0, 99999)
    if (navigator?.clipboard?.writeText) {
        navigator.clipboard.writeText(_emails.value);
        H.GrowlInfo('The filtered emails has been copied. You can paste the emails by using CTRl+V key.');
        return;
    }
    try {
        ok = document.execCommand('copy');
    } catch (e) {
    }
    if (ok) {
        H.GrowlInfo('The filtered emails has been copied. You can paste the emails by using CTRl+V key.');
        return;
    }
    H.GrowlError('Failed to copy the filtered emails. Please try again or you may copy the email manually.');
}

H.TimeToMinutes = function (time) {
    const [hours, minutes] = time.split(':').map(Number);
    return (hours * 60) + minutes;
}

H.MinutesToTime = function (minutes) {
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    const hh = hours.toString().padStart(2, '0');
    const mm = remainingMinutes.toString().padStart(2, '0');
    return hh + ':' + mm;
}

H.GraduationPredicate = function (row) {
    const semesters = H.GenerateSemesters(row.first_enroll, row.last_enroll);
    let long_sem_count = 0;
    let short_sem_count = 0;
    for (const y in semesters) (+H.TakeRight(semesters[y], 1) === 3) ? short_sem_count++ : long_sem_count++;
    row.long_sem_count = long_sem_count;
    row.short_sem_count = short_sem_count;
    const academic_degree = +row.academic_degree;
    const gpa = +(row.ipk_cache.toFixed(2));
    const min_grade_b = (row.min_grade_b);
    const retake_count = +row.retake_count;
    const replace_count = +row.replace_count;
    const is_transfer = row.is_transfer;
    const month_duration = row.month_duration;
    // predicate evaluation
    let valid_study_period = false;
    let temp_graduation_predicate = 'graduate';
    if (academic_degree === 1) {   // S1 degree
        valid_study_period = ((month_duration > 0 && month_duration <= 48) || (long_sem_count <= 8 && short_sem_count <= 4));
        if (gpa >= 4) {
            temp_graduation_predicate = 'summa_cum_laude';
        } else if (gpa >= 3.85) {
            temp_graduation_predicate = 'magna_cum_laude';
        } else if (gpa > 3.50) {
            temp_graduation_predicate = 'cum_laude';
        } else if (gpa >= 3.01) {
            temp_graduation_predicate = 'very_satisfactory';
        } else if (gpa >= 2.76) {
            temp_graduation_predicate = 'satisfactory';
        }
    } else {                    // S2, S3 degree
        valid_study_period = ((month_duration > 0 && month_duration <= 24) || (long_sem_count <= 4 && short_sem_count <= 2));
        if (gpa >= 4) {
            temp_graduation_predicate = 'summa_cum_laude';
        } else if (gpa >= 3.85) {
            temp_graduation_predicate = 'magna_cum_laude';
        } else if (gpa >= 3.75) {
            temp_graduation_predicate = 'cum_laude';
        } else if (gpa >= 3.51) {
            temp_graduation_predicate = 'very_satisfactory';
        } else if (gpa >= 3) {
            temp_graduation_predicate = 'satisfactory';
        }
    }
    let cumlaude_must_rule = (min_grade_b && retake_count === 0 && replace_count === 0 && !is_transfer && valid_study_period);
    if (temp_graduation_predicate === 'summa_cum_laude' && !cumlaude_must_rule) {
        temp_graduation_predicate = 'distinction';
    }
    if (temp_graduation_predicate === 'magna_cum_laude' && !cumlaude_must_rule) {
        temp_graduation_predicate = 'distinction';
    }
    if (temp_graduation_predicate === 'cum_laude' && !cumlaude_must_rule) {
        temp_graduation_predicate = 'very_satisfactory';
    }
    return temp_graduation_predicate;
}

H.GenerateSemesters = function (first_enroll, last_enroll) {
    const start = first_enroll.substr(0, 4);
    const end = last_enroll.substr(0, 4);
    const semesters = [];
    for (let i = start; i <= end; i++) {
        for (let j = 1; j <= 3; j++) {
            const semester = '' + i + j;
            if (!semesters.includes(semester)) semesters.push(semester);
        }
    }
    const res = [];
    for (const x in semesters) {
        const sem = +semesters[x];
        if (sem >= +first_enroll && sem <= last_enroll) res.push(semesters[x]);
    }
    return res;
}
/**
 * Coalesce
 * Return first non null value
 * */
H.Coalesce = (...values) => {
    return values.find(value => value !== null);
}

/**
 * Build Questionnaire Fields data
 * example can be found in module/tracer_study/alumni/:tracer_setup_id
 * html example can be found in tracer_study_new.html
 * Feed: questionnaire, sections, questions
 * Spat: fields
* */
H.QuestionnaireFieldsData = (questionnaire, sections, _questions) => {
    let sections_data = [];
    for (let i = 0; i < sections.length; i++) {
        const section = sections[i];
        const next_id = (i + 1 < sections.length) ? sections[i + 1].id : '';
        const prev_id = (i - 1 >= 0) ? sections[i - 1].id : '';
        let questions = [];
        const filtered = _questions.filter(item => item.sections_id == section.id)
        filtered.forEach((item) => {
                const val = {
                    id: item.id.toString(), no: item.q_num,
                    label: item.question, name: 'q_' + item.id,
                    type: item.q_type, preload: item.display,
                    data_group: item.q_group, other_label: item.other_var,
                }
                const select_input = ['radio', 'radio_inline', 'checkbox']
                if (select_input.some(e => e === item.q_type)) {
                    const ds_options = JSON.parse(item.ds_options)
                    const keys = Object.keys(ds_options);
                    const options = {}
                    keys.forEach((key) => {
                        options[key] = ds_options[key][0]
                    })
                    val['options'] = options;
                    val['onchange'] = function (h, s, q, v) {
                        let func = "";
                        keys.forEach((key, index) => {
                            const opt = ds_options[key];
                            val["options"][key] = opt[0];
                            // Append the conditional string
                            if (index === 0) {
                                func += `if (${v} == '${key}') {\n`;
                            } else {
                                func += `} else if (${v} == '${key}') {\n`;
                            }

                            func += `    h.ToggleQuestionbyDataGroup("${opt[1]}", "${opt[2]}");\n`;
                        });
                        // Close the last if statement
                        if (func) func += `}\n`;
                        const dynamicCode = new Function("h", "v", func)
                        dynamicCode(h, v);
                    }
                }
                questions.push(val)
            }
        )
        sections_data.push({
            id: section.id.toString(),
            label: section.title,
            next: next_id.toString(),
            prev: prev_id.toString(),
            questions: questions,
        });
    }
    return sections_data
}

H.PassEnglishProficiency = function (row) {
    let pass_english_proficiency = false;
    let batch = (row.batch).substring(0, 4);
    let program_session = row.program_session;
    let academic_degree = row.academic_degree;

    let survival_english = H.Contains(row.survival_english, ['A', 'A-', 'B+', 'B']); // 1
    let fluency_and_speed_development = H.Contains(row.fluency_and_speed_development, ['A', 'A-', 'B+', 'B']); // 2
    let accuracy_development = H.Contains(row.accuracy_development, ['A', 'A-', 'B+', 'B']); // 3
    let professional_english = H.Contains(row.professional_english, ['A', 'A-', 'B+', 'B']); // 4
    let academic_writing = H.Contains(row.academic_writing, ['A', 'A-', 'B+', 'B']); // 5
    let research_paper_writing = H.Contains(row.research_paper_writing, ['A', 'A-', 'B+', 'B']); // 6

    let pass_english_non_credit = false;
    if (program_session === 'M') {
        if (batch <= '2022') { // Progses M, Batch <= 2022 (Level 2-6)
            if (+academic_degree === 1) {
                pass_english_non_credit = fluency_and_speed_development && accuracy_development && professional_english && academic_writing && research_paper_writing;
            } else {
                pass_english_non_credit = academic_writing && research_paper_writing && accuracy_development; // S2
            }
        } else { // Progses M, Batch >= 2023 (Level 1-6)
            if (+academic_degree === 1) {
                pass_english_non_credit = survival_english && fluency_and_speed_development && accuracy_development && professional_english && academic_writing && research_paper_writing;
            } else {
                pass_english_non_credit = academic_writing && research_paper_writing && accuracy_development; // S2
            }
        }
    } else {
        if (batch >= '2023') { // Progses N, Batch >= 2023 (Level 1-6)
            if (+academic_degree === 1) {
                pass_english_non_credit = survival_english && fluency_and_speed_development && accuracy_development && professional_english && academic_writing && research_paper_writing;
            } else {
                pass_english_non_credit = academic_writing && research_paper_writing && accuracy_development; // S2
            }
        }
    }

    if (row.english_status === 'pass' || pass_english_non_credit) {
        pass_english_proficiency = true;
    }
    return pass_english_proficiency;
}

H.PassEnglishMethodType = function (row) {
    let batch = (row.batch).substring(0, 4);
    let program_session = row.program_session;
    let academic_degree = row.academic_degree;

    let survival_english = H.Contains(row.survival_english, ['A', 'A-', 'B+', 'B']); // 1
    let fluency_and_speed_development = H.Contains(row.fluency_and_speed_development, ['A', 'A-', 'B+', 'B']); // 2
    let accuracy_development = H.Contains(row.accuracy_development, ['A', 'A-', 'B+', 'B']); // 3
    let professional_english = H.Contains(row.professional_english, ['A', 'A-', 'B+', 'B']); // 4
    let academic_writing = H.Contains(row.academic_writing, ['A', 'A-', 'B+', 'B']); // 5
    let research_paper_writing = H.Contains(row.research_paper_writing, ['A', 'A-', 'B+', 'B']); // 6

    let pass_english_non_credit = false;
    if (program_session === 'M') {
        if (batch <= '2022') { // Progses M, Batch <= 2022 (Level 2-6)
            if (+academic_degree === 1) {
                pass_english_non_credit = fluency_and_speed_development && accuracy_development && professional_english && academic_writing && research_paper_writing;
            } else {
                pass_english_non_credit = academic_writing && research_paper_writing && accuracy_development; // S2
            }
        } else { // Progses M, Batch >= 2023 (Level 1-6)
            if (+academic_degree === 1) {
                pass_english_non_credit = survival_english && fluency_and_speed_development && accuracy_development && professional_english && academic_writing && research_paper_writing;
            } else {
                pass_english_non_credit = academic_writing && research_paper_writing && accuracy_development; // S2
            }
        }
    } else {
        if (batch >= '2023') { // Progses N, Batch >= 2023 (Level 1-6)
            if (+academic_degree === 1) {
                pass_english_non_credit = survival_english && fluency_and_speed_development && accuracy_development && professional_english && academic_writing && research_paper_writing;
            } else {
                pass_english_non_credit = academic_writing && research_paper_writing && accuracy_development; // S2
            }
        }
    }

    if (row.english_method_type) {
        return row.english_method_type;
    } else if (pass_english_non_credit) {
        return 'PASS ENGLISH NON CREDIT'
    }
}